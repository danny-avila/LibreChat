#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...\n');

const fs = require('fs');
const path = require('path');

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  const { Tool } = require('@langchain/core/tools');
  console.log('‚úÖ @langchain/core/tools –∑–∞–≥—Ä—É–∂–µ–Ω');

  const directory = './api/app/clients/tools/structured';
  const files = fs.readdirSync(directory);
  
  console.log('üìÅ –§–∞–π–ª—ã –≤ structured:', files.filter(f => f.endsWith('.js')).length);
  
  let loaded = 0, errors = 0;
  
  for (const file of files) {
    if (!file.endsWith('.js') || file.endsWith('.test.js')) {
      continue;
    }
    
    try {
      const filePath = path.join(directory, file);
      console.log(`\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${file}`);
      
      const ToolClass = require(filePath);
      
      if (!ToolClass || !(ToolClass.prototype instanceof Tool)) {
        console.log(`   ‚ö†Ô∏è  –ù–µ —è–≤–ª—è–µ—Ç—Å—è Tool –∫–ª–∞—Å—Å–æ–º`);
        continue;
      }
      
      const instance = new ToolClass({ override: true });
      console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫: ${instance.name}`);
      loaded++;
      
    } catch(error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message.substring(0, 60)}...`);
      errors++;
    }
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${loaded}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`);
  console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(loaded/(loaded+errors)*100)}%`);
  
  if (errors === 0) {
    console.log('\nüéâ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  }
  
} catch (error) {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
} 