/**
 * –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç API Monday.com
 */

const https = require('https');

const apiKey = "eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjk0MjExMjM5LCJhYWkiOjExLCJ1aWQiOjE3NzE5NjYwLCJpYWQiOiIyMDIwLTEyLTIzVDIwOjU4OjQ1LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSIsImFjdGlkIjo3Nzc1MTUwLCJyZ24iOiJ1c2UxIn0.Gg8pbEhIdLEwlVu4azaVQK137bVbUMSww__yqIR1kTM";

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç...');

// –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫
const query = `query { boards(limit: 1) { id name } }`;

const data = JSON.stringify({ query });

const options = {
  hostname: 'api.monday.com',
  port: 443,
  path: '/v2',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': apiKey,
    'Content-Length': Buffer.byteLength(data)
  }
};

console.log('üìã –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å...');

const req = https.request(options, (res) => {
  console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
  
  let responseData = '';
  
  res.on('data', (chunk) => {
    responseData += chunk;
  });
  
  res.on('end', () => {
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', responseData);
    
    try {
      const result = JSON.parse(responseData);
      
      if (result.errors) {
        console.error('‚ùå GraphQL –æ—à–∏–±–∫–∏:', result.errors);
      } else {
        console.log('‚úÖ –£—Å–ø–µ—Ö! –î–∞–Ω–Ω—ã–µ:', result.data);
        
        if (result.data.boards && result.data.boards.length > 0) {
          const board = result.data.boards[0];
          console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –¥–æ—Å–∫–∞: "${board.name}" (ID: ${board.id})`);
          
          // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
          testColumnUpdate(board.id);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error.message);
    }
  });
});

req.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
});

req.write(data);
req.end();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
function testColumnUpdate(boardId) {
  console.log('\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å–∫–∏
  const itemsQuery = `
    query($boardId: ID!) {
      boards(ids: [$boardId]) {
        items(limit: 1) {
          id
          name
          column_values {
            id
            type
            text
          }
        }
        columns {
          id
          title
          type
        }
      }
    }
  `;
  
  const itemsData = JSON.stringify({
    query: itemsQuery,
    variables: { boardId }
  });
  
  const itemsReq = https.request(options, (res) => {
    let responseData = '';
    
    res.on('data', (chunk) => {
      responseData += chunk;
    });
    
    res.on('end', () => {
      try {
        const result = JSON.parse(responseData);
        
        if (result.data.boards[0].items.length > 0) {
          const item = result.data.boards[0].items[0];
          const columns = result.data.boards[0].columns;
          
          console.log(`üìã –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: "${item.name}" (ID: ${item.id})`);
          console.log(`üìä –ö–æ–ª–æ–Ω–∫–∏: ${columns.length}`);
          
          // –ù–∞–π–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
          const textColumn = columns.find(col => col.type === 'text');
          
          if (textColumn) {
            console.log(`üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É: "${textColumn.title}"`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
            const updateMutation = `
              mutation($boardId: ID!, $itemId: ID!, $columnId: String!, $value: String!) {
                change_simple_column_value(
                  board_id: $boardId, 
                  item_id: $itemId, 
                  column_id: $columnId, 
                  value: $value
                ) {
                  id
                }
              }
            `;
            
            const updateData = JSON.stringify({
              query: updateMutation,
              variables: {
                boardId: boardId,
                itemId: item.id,
                columnId: textColumn.id,
                value: `API Test ${new Date().toISOString()}`
              }
            });
            
            const updateReq = https.request(options, (res) => {
              let responseData = '';
              
              res.on('data', (chunk) => {
                responseData += chunk;
              });
              
              res.on('end', () => {
                console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', responseData);
                
                try {
                  const updateResult = JSON.parse(responseData);
                  if (updateResult.errors) {
                    console.error('‚ùå –û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateResult.errors);
                  } else {
                    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
                  }
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
                }
              });
            });
            
            updateReq.on('error', (error) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
            });
            
            updateReq.write(updateData);
            updateReq.end();
            
          } else {
            console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          }
          
        } else {
          console.log('‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–æ—Å–∫–µ');
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error.message);
      }
    });
  });
  
  itemsReq.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error.message);
  });
  
  itemsReq.write(itemsData);
  itemsReq.end();
}
