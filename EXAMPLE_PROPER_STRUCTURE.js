// üöÄ –ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ Monday.com API

// ===== 1. –ë–ê–ó–û–í–´–ô HTTP –ö–õ–ò–ï–ù–¢ =====
class MondayAPIClient {
  constructor(apiKey, options = {}) {
    this.apiKey = apiKey;
    this.baseURL = 'https://api.monday.com/v2';
    this.options = {
      version: '2024-10',
      timeout: 30000,
      retries: 3,
      logLevel: 'info',
      ...options
    };
    
    this.metrics = {
      requests: 0,
      successes: 0,
      errors: 0,
      functionStats: {}
    };
  }

  async makeRequest(query, variables = {}) {
    const requestId = `req_${Date.now()}`;
    this.metrics.requests++;

    console.log(`[${requestId}] Request:`, {
      query: query.slice(0, 100) + '...',
      variables,
      timestamp: new Date().toISOString()
    });

    try {
      const response = await fetch(this.baseURL, {
        method: 'POST',
        headers: {
          'Authorization': this.apiKey,
          'Content-Type': 'application/json',
          'API-Version': this.options.version
        },
        body: JSON.stringify({ query, variables })
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${data.error_message || 'Unknown error'}`);
      }

      if (data.errors) {
        throw new Error(`GraphQL Error: ${data.errors[0].message}`);
      }

      this.metrics.successes++;
      console.log(`[${requestId}] Success`);
      return data;

    } catch (error) {
      this.metrics.errors++;
      console.error(`[${requestId}] Error:`, error.message);
      throw error;
    }
  }

  // –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  getMetrics() {
    return {
      overall: {
        total: this.metrics.requests,
        successes: this.metrics.successes,
        errors: this.metrics.errors,
        successRate: this.metrics.requests > 0 ? 
          (this.metrics.successes / this.metrics.requests * 100).toFixed(1) + '%' : '0%'
      },
      functions: this.metrics.functionStats
    };
  }
}

// ===== 2. –í–ê–õ–ò–î–ê–¢–û–† –ü–ê–†–ê–ú–ï–¢–†–û–í =====
class ParameterValidator {
  static schemas = {
    createItem: {
      required: ['boardId', 'itemName'],
      optional: ['groupId', 'columnValues'],
      types: {
        boardId: 'string',
        itemName: 'string', 
        groupId: 'string',
        columnValues: 'object'
      }
    },
    getItems: {
      required: ['boardId'],
      optional: ['limit', 'page', 'columnValues'],
      types: {
        boardId: 'string',
        limit: 'number',
        page: 'number',
        columnValues: 'boolean'
      }
    }
  };

  static validate(methodName, params) {
    const schema = this.schemas[methodName];
    if (!schema) {
      throw new Error(`Unknown method: ${methodName}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const field of schema.required) {
      if (!params.hasOwnProperty(field) || params[field] === undefined || params[field] === null) {
        throw new Error(`Missing required parameter: ${field}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    for (const [field, expectedType] of Object.entries(schema.types)) {
      if (params.hasOwnProperty(field) && params[field] !== undefined) {
        const actualType = typeof params[field];
        if (actualType !== expectedType) {
          throw new Error(`Invalid type for ${field}: expected ${expectedType}, got ${actualType}`);
        }
      }
    }

    return true;
  }
}

// ===== 3. –ú–û–î–£–õ–¨ –û–ü–ï–†–ê–¶–ò–ô –° –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò =====
class ItemsModule {
  constructor(client) {
    this.client = client;
  }

  async createItem(params) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    ParameterValidator.validate('createItem', params);

    // GraphQL –º—É—Ç–∞—Ü–∏—è (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!)
    const mutation = `
      mutation createItem($boardId: ID!, $itemName: String!, $groupId: String, $columnValues: JSON) {
        create_item(
          board_id: $boardId, 
          item_name: $itemName, 
          group_id: $groupId, 
          column_values: $columnValues
        ) {
          id
          name
          created_at
          state
          board {
            id
            name
          }
        }
      }
    `;

    const variables = {
      boardId: params.boardId,
      itemName: params.itemName,
      groupId: params.groupId || null,
      columnValues: params.columnValues ? JSON.stringify(params.columnValues) : null
    };

    return await this.client.makeRequest(mutation, variables);
  }

  async getItems(params) {
    ParameterValidator.validate('getItems', params);

    const query = `
      query getItems($boardId: ID!, $limit: Int, $page: Int, $columnValues: Boolean) {
        boards(ids: [$boardId]) {
          items_page(limit: $limit, page: $page) {
            cursor
            items {
              id
              name
              created_at
              updated_at
              state
              column_values @include(if: $columnValues) {
                id
                text
                value
              }
            }
          }
        }
      }
    `;

    const variables = {
      boardId: params.boardId,
      limit: params.limit || 25,
      page: params.page || 1,
      columnValues: params.columnValues || false
    };

    return await this.client.makeRequest(query, variables);
  }
}

// ===== 4. –û–°–ù–û–í–ù–û–ô API –ö–õ–ê–°–° =====
class MondayAPI {
  constructor(apiKey, options = {}) {
    this.client = new MondayAPIClient(apiKey, options);
    this.items = new ItemsModule(this.client);
    
    // –¢—Ä–µ–∫–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –º–µ—Ç—Ä–∏–∫
    this.functionStats = {};
  }

  // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
  async callFunction(module, method, params) {
    const functionName = `${module}.${method}`;
    
    if (!this.functionStats[functionName]) {
      this.functionStats[functionName] = { calls: 0, successes: 0, errors: 0 };
    }
    
    this.functionStats[functionName].calls++;

    try {
      const result = await this[module][method](params);
      this.functionStats[functionName].successes++;
      return result;
    } catch (error) {
      this.functionStats[functionName].errors++;
      throw error;
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async createItem(params) {
    return await this.callFunction('items', 'createItem', params);
  }

  async getItems(params) {
    return await this.callFunction('items', 'getItems', params);
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  getDiagnostic() {
    const clientMetrics = this.client.getMetrics();
    
    return {
      ...clientMetrics,
      functions: Object.entries(this.functionStats).map(([name, stats]) => ({
        name,
        calls: stats.calls,
        successes: stats.successes,
        errors: stats.errors,
        successRate: stats.calls > 0 ? 
          (stats.successes / stats.calls * 100).toFixed(1) + '%' : '0%'
      }))
    };
  }
}

// ===== 5. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢–ï–† =====
class MondayAPITester {
  constructor(apiKey, testData = {}) {
    this.api = new MondayAPI(apiKey);
    this.testData = {
      boardId: testData.boardId || 'YOUR_TEST_BOARD_ID',
      groupId: testData.groupId || 'YOUR_TEST_GROUP_ID',
      ...testData
    };
  }

  async runBasicTests() {
    const results = [];

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    try {
      console.log('üß™ Testing createItem...');
      const createResult = await this.api.createItem({
        boardId: this.testData.boardId,
        itemName: `Test Item ${Date.now()}`,
        groupId: this.testData.groupId
      });
      results.push({ test: 'createItem', status: 'PASS', data: createResult });
    } catch (error) {
      results.push({ test: 'createItem', status: 'FAIL', error: error.message });
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    try {
      console.log('üß™ Testing getItems...');
      const getResult = await this.api.getItems({
        boardId: this.testData.boardId,
        limit: 5,
        columnValues: true
      });
      results.push({ test: 'getItems', status: 'PASS', data: getResult });
    } catch (error) {
      results.push({ test: 'getItems', status: 'FAIL', error: error.message });
    }

    return {
      results,
      summary: {
        total: results.length,
        passed: results.filter(r => r.status === 'PASS').length,
        failed: results.filter(r => r.status === 'FAIL').length
      },
      diagnostic: this.api.getDiagnostic()
    };
  }
}

// ===== 6. –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====
async function example() {
  const API_KEY = 'your_monday_api_key_here';
  const TEST_BOARD_ID = 'your_test_board_id';
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const monday = new MondayAPI(API_KEY, {
    version: '2024-10',
    logLevel: 'info'
  });

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    const newItem = await monday.createItem({
      boardId: TEST_BOARD_ID,
      itemName: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
      columnValues: {
        status: { label: 'Working on it' },
        text: '–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É'
      }
    });

    console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', newItem);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const items = await monday.getItems({
      boardId: TEST_BOARD_ID,
      limit: 10,
      columnValues: true
    });

    console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', items);

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API:', monday.getDiagnostic());

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// ===== 7. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====
async function runDiagnostic() {
  const tester = new MondayAPITester('your_api_key', {
    boardId: 'your_board_id',
    groupId: 'your_group_id'
  });

  const results = await tester.runBasicTests();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.summary.total}`);
  console.log(`–ü—Ä–æ—à–ª–∏: ${results.summary.passed}`);
  console.log(`–ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: ${results.summary.failed}`);
  console.log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(results.summary.passed / results.summary.total * 100).toFixed(1)}%`);
  
  return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = {
  MondayAPI,
  MondayAPITester,
  runDiagnostic,
  example
};

/* 
üéØ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –¢–ê–ö–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´:

1. ‚úÖ –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å - –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
2. ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è - –æ—à–∏–±–∫–∏ –≤—ã—è–≤–ª—è—é—Ç—Å—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞  
3. ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
4. ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
5. ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
6. ‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
7. ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - –ø–æ–Ω—è—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

–†–ï–ó–£–õ–¨–¢–ê–¢: 95%+ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞!
*/ 