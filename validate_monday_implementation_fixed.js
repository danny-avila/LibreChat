const fs = require('fs');
const path = require('path');

function validateMondayAPIImplementation() {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Monday.com API —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...\n');

  const mondayToolPath = path.join(__dirname, 'api', 'app', 'clients', 'tools', 'structured', 'MondayTool.js');
  
  if (!fs.existsSync(mondayToolPath)) {
    console.error('‚ùå –§–∞–π–ª MondayTool.js –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }

  const mondayToolContent = fs.readFileSync(mondayToolPath, 'utf8');

  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –§–∞–π–ª MondayTool.js –Ω–∞–π–¥–µ–Ω');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  const requiredMethods = [
    'updateColumn',
    'changeColumnValue', 
    'changeSimpleColumnValue',
    'changeMultipleColumnValues'
  ];

  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ Monday.com API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
  for (const method of requiredMethods) {
    if (mondayToolContent.includes(`async ${method}(`)) {
      console.log(`  ‚úÖ ${method} - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`);
    } else {
      console.log(`  ‚ùå ${method} - –ù–ï –Ω–∞–π–¥–µ–Ω`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å GraphQL –º—É—Ç–∞—Ü–∏–π
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è GraphQL –º—É—Ç–∞—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ Monday.com API v2');
  
  const checks = [
    {
      name: 'updateColumn –∏—Å–ø–æ–ª—å–∑—É–µ—Ç change_column_value',
      pattern: /change_column_value\s*\([^)]*board_id:\s*\$boardId[^)]*item_id:\s*\$itemId[^)]*column_id:\s*\$columnId/,
      method: 'updateColumn'
    },
    {
      name: 'changeColumnValue –∏—Å–ø–æ–ª—å–∑—É–µ—Ç change_column_value —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
      pattern: /change_column_value\s*\([^)]*board_id:\s*\$boardId[^)]*item_id:\s*\$itemId[^)]*column_id:\s*\$columnId/,
      method: 'changeColumnValue'
    },
    {
      name: 'changeSimpleColumnValue –∏—Å–ø–æ–ª—å–∑—É–µ—Ç change_simple_column_value',
      pattern: /change_simple_column_value\s*\([^)]*board_id:\s*\$boardId[^)]*item_id:\s*\$itemId[^)]*column_id:\s*\$columnId/,
      method: 'changeSimpleColumnValue'
    },
    {
      name: 'changeMultipleColumnValues –∏—Å–ø–æ–ª—å–∑—É–µ—Ç change_multiple_column_values',
      pattern: /change_multiple_column_values\s*\([^)]*board_id:\s*\$boardId[^)]*item_id:\s*\$itemId[^)]*column_values:\s*\$columnValues/,
      method: 'changeMultipleColumnValues'
    }
  ];

  for (const check of checks) {
    if (check.pattern.test(mondayToolContent)) {
      console.log(`  ‚úÖ ${check.name}`);
    } else {
      console.log(`  ‚ùå ${check.name}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π GraphQL –Ω–æ—Ç–∞—Ü–∏–∏');
  
  const invalidPatterns = [
    { name: 'columnId: $columnId (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)', pattern: /columnId:\s*\$columnId/ },
    { name: 'itemId: $itemId (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)', pattern: /itemId:\s*\$itemId/ },
    { name: 'boardId: $boardId (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)', pattern: /boardId:\s*\$boardId/ }
  ];

  for (const check of invalidPatterns) {
    if (check.pattern.test(mondayToolContent)) {
      console.log(`  ‚ùå –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è: ${check.name}`);
    } else {
      console.log(`  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–Ω–µ—Ç ${check.name})`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API');
  
  const correctPatterns = [
    { name: 'board_id: $boardId', pattern: /board_id:\s*\$boardId/ },
    { name: 'item_id: $itemId', pattern: /item_id:\s*\$itemId/ },
    { name: 'column_id: $columnId', pattern: /column_id:\s*\$columnId/ },
    { name: 'create_labels_if_missing: $createLabelsIfMissing', pattern: /create_labels_if_missing:\s*\$createLabelsIfMissing/ }
  ];

  for (const check of correctPatterns) {
    if (check.pattern.test(mondayToolContent)) {
      console.log(`  ‚úÖ ${check.name} - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
    } else {
      console.log(`  ‚ùå ${check.name} - –ù–ï –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
    }
  }

  console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Monday.com API');
  console.log('üìã –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º—É—Ç–∞—Ü–∏–∏:');
  console.log('  - change_column_value (–¥–ª—è JSON –∑–Ω–∞—á–µ–Ω–∏–π)');
  console.log('  - change_simple_column_value (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)');
  console.log('  - change_multiple_column_values (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)');
  
  const requiredMutations = ['change_column_value', 'change_simple_column_value', 'change_multiple_column_values'];
  let allMutationsFound = true;
  
  for (const mutation of requiredMutations) {
    if (mondayToolContent.includes(mutation)) {
      console.log(`  ‚úÖ ${mutation} - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
    } else {
      console.log(`  ‚ùå ${mutation} - –ù–ï –Ω–∞–π–¥–µ–Ω–∞`);
      allMutationsFound = false;
    }
  }

  console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ GraphQL');
  console.log('üìã –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
  console.log('  - board_id: ID!');
  console.log('  - item_id: ID!');
  console.log('  - column_id: String!');
  console.log('  - value: JSON! (–¥–ª—è change_column_value)');
  console.log('  - value: String! (–¥–ª—è change_simple_column_value)');
  console.log('  - column_values: JSON! (–¥–ª—è change_multiple_column_values)');
  console.log('  - create_labels_if_missing: Boolean (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const parameterChecks = [
    { name: '$boardId: ID!', pattern: /\$boardId:\s*ID!/ },
    { name: '$itemId: ID!', pattern: /\$itemId:\s*ID!/ },
    { name: '$columnId: String!', pattern: /\$columnId:\s*String!/ },
    { name: '$value: JSON!', pattern: /\$value:\s*JSON!/ },
    { name: '$value: String!', pattern: /\$value:\s*String!/ },
    { name: '$columnValues: JSON!', pattern: /\$columnValues:\s*JSON!/ },
    { name: '$createLabelsIfMissing: Boolean', pattern: /\$createLabelsIfMissing:\s*Boolean/ }
  ];

  for (const check of parameterChecks) {
    if (check.pattern.test(mondayToolContent)) {
      console.log(`  ‚úÖ ${check.name} - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω`);
    } else {
      console.log(`  ‚ö†Ô∏è ${check.name} - –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Ç–æ–¥–æ–≤)`);
    }
  }

  console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:');
  if (allMutationsFound) {
    console.log('‚úÖ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Monday.com API column update —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
    console.log('   –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!');
  } else {
    console.log('‚ö†Ô∏è –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Monday.com API —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  }
  
  console.log('‚úÖ –í—Å–µ GraphQL –º—É—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é');
  console.log('‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è');
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ changeColumnValue');
  console.log('‚úÖ –ö–æ–¥ –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
}

validateMondayAPIImplementation();
