const MondayTool = require('./api/app/clients/tools/structured/MondayTool');

async function testMondayColumnUpdate() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é updateColumn –≤ MondayTool...\n');

  const apiKey = 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjk0MjExMjM5LCJhYWkiOjExLCJ1aWQiOjE3NzE5NjYwLCJpYWQiOiIyMDIwLTEyLTIzVDIwOjU4OjQ1LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSIsImFjdGlkIjo3Nzc1MTUwLCJyZ24iOiJ1c2UxIn0.Gg8pbEhIdLEwlVu4azaVQK137bVbUMSww__yqIR1kTM';
  
  try {
    const mondayTool = new MondayTool({ apiKey });

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å–∫–∏
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å–∫–∏...');
    const boardsResult = await mondayTool._call({
      action: 'getBoards',
      limit: 1
    });

    const boardsData = JSON.parse(boardsResult);
    if (!boardsData.success || !boardsData.data.length) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å–∫–∏');
      return;
    }

    const board = boardsData.data[0];
    console.log(`‚úÖ –î–æ—Å–∫–∞: "${board.name}" (ID: ${board.id})`);

    // 2. –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('\nüìù –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã...');
    const itemsResult = await mondayTool._call({
      action: 'getItems',
      boardId: board.id,
      limit: 1
    });

    const itemsData = JSON.parse(itemsResult);
    if (!itemsData.success || !itemsData.data.length) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã');
      return;
    }

    const item = itemsData.data[0];
    console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç: "${item.name}" (ID: ${item.id})`);

    // 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    console.log('\nüìä –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö...');
    const columnsResult = await mondayTool._call({
      action: 'getColumnsInfo',
      boardId: board.id
    });

    const columnsData = JSON.parse(columnsResult);
    if (!columnsData.success || !columnsData.data.length) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏');
      return;
    }

    // –ù–∞–π–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
    const textColumn = columnsData.data.find(col => col.type === 'text');
    if (!textColumn) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞');
      return;
    }

    console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: "${textColumn.title}" (ID: ${textColumn.id})`);

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º updateColumn
    console.log('\nüîß –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º updateColumn...');
    const updateResult = await mondayTool._call({
      action: 'updateColumn',
      boardId: board.id,
      itemId: item.id,
      columnId: textColumn.id,
      value: `–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${new Date().toLocaleString()}`
    });

    const updateData = JSON.parse(updateResult);
    if (updateData.success) {
      console.log('‚úÖ updateColumn —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', updateData);
    } else {
      console.error('‚ùå updateColumn –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', updateData);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testMondayColumnUpdate();
