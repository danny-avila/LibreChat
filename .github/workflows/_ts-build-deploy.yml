name: _TS Build and Deploy

on:
  workflow_dispatch:
    inputs:
      imageTag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set dynamic image tag
      id: set-tag
      shell: pwsh
      run: |
        $tag = "${{ github.event.inputs.imageTag }}"
        if ($tag -eq "latest" -or $tag -eq "") {
          $shortSha = "${{ github.sha }}".Substring(0, 7)
          $tag = "v-$shortSha"
        }
        echo "IMAGE_TAG=$tag" >> $env:GITHUB_OUTPUT
      
    - name: Run build and deploy script
      shell: pwsh
      run: |
        $secretNames = @(
          "MONGO_URI",
          "CREDS_KEY", 
          "CREDS_IV", 
          "JWT_SECRET", 
          "JWT_REFRESH_SECRET", 
          "SESSION_SECRET", 
          "AZURE_OPENAI_API_KEY",
          "EMAIL_PASSWORD",
          "REGISTRY_USERNAME",
          "REGISTRY_PASSWORD"
        )

        $variableNames = @(
          "EMAIL_FROM",
          "EMAIL_FROM_NAME",
          "EMAIL_USERNAME"
        )

        $secretsHashtable = @{}
        $envVarsHashtable = @{}

        foreach ($name in $secretNames) {
          $secretValue = "${{ secrets[format('{0}', name)] }}"
          if ($secretValue -and $secretValue -ne "") {
            $secretsHashtable[$name] = $secretValue
          }
        }

        foreach ($name in $variableNames) {
          $varValue = "${{ vars[format('{0}', name)] }}"
          if ($varValue -and $varValue -ne "") {
            $envVarsHashtable[$name] = $varValue
          }
        }

        ./custom/scripts/build-and-deploy.ps1 `
          -ImageName "ts-librechat" `
          -ImageTag "${{ steps.set-tag.outputs.IMAGE_TAG }}" `
          -Registry "registry.totalsoft.local" `
          -Namespace "librechat" `
          -HelmReleaseName "librechat" `
          -RegistryUsername "${{ secrets.REGISTRY_USERNAME }}" `
          -RegistryPassword "${{ secrets.REGISTRY_PASSWORD }}" `
          -Secrets $secretsHashtable `
          -EnvVars $envVarsHashtable
