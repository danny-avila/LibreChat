name: _TS Clean Up Docker Registry

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly at midnight on Sunday
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Dry run (no actual deletion)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      targetRepositories:
        description: 'Comma-separated list of target repositories to clean up'
        required: false
        type: string
        default: 'librechat-custom'

jobs:
  cleanup:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install regctl
      shell: bash
      env:
        SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
      run: |
        # Download regctl (Docker registry client)
        curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 -o regctl
        chmod +x regctl
        echo "$SUDO_PASSWORD" | sudo -S mv regctl /usr/local/bin/
        
    - name: Identify and delete orphaned images
      shell: bash
      env:
        REGISTRY_URL: registry.totalsoft.local
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        DRY_RUN: ${{ github.event.inputs.dryRun || 'true' }}
        TARGET_REPOSITORIES: ${{ github.event.inputs.targetRepositories || secrets.TARGET_REPOSITORIES || 'librechat-custom' }}
      run: |
        echo "Looking for orphaned images in $REGISTRY_URL"
        
        # Login to registry
        echo "$REGISTRY_PASSWORD" | regctl registry login $REGISTRY_URL --user $REGISTRY_USERNAME --pass-stdin
        
        # Determine which repositories to process
        if [ -n "$TARGET_REPOSITORIES" ]; then
          # Use the specified repositories (comma-separated list)
          IFS=',' read -ra REPOS <<< "$TARGET_REPOSITORIES"
          echo "Processing specified repositories: ${REPOS[*]}"
        else
          # If somehow we got here with empty TARGET_REPOSITORIES, use librechat-custom as default
          REPOS=("librechat-custom")
          echo "Using default repository: librechat-custom"
        fi
        
        for REPO in "${REPOS[@]}"; do
          # Trim whitespace
          REPO=$(echo "$REPO" | xargs)
          echo "Processing repository: $REPO"
          
          # Get all tags for this repository
          TAGS=$(regctl tag ls $REGISTRY_URL/$REPO)
          
          # Keep only the latest 5 tags for each repository
          if [ $(echo "$TAGS" | wc -l) -gt 5 ]; then
            # Sort tags by creation date (assuming version tags with dates or incremental numbers)
            # Keep the 5 most recent tags
            TAGS_TO_DELETE=$(echo "$TAGS" | sort -V | head -n -5)
            
            echo "Tags to keep for $REPO: $(echo "$TAGS" | sort -V | tail -n 5)"
            echo "Tags to delete for $REPO: $TAGS_TO_DELETE"
            
            # Delete old tags
            if [ "$DRY_RUN" = "false" ]; then
              for TAG in $TAGS_TO_DELETE; do
                echo "Deleting $REGISTRY_URL/$REPO:$TAG"
                regctl manifest delete $REGISTRY_URL/$REPO:$TAG
              done
            else
              echo "[DRY RUN] Would delete these tags: $TAGS_TO_DELETE"
            fi
          else
            echo "Repository $REPO has 5 or fewer tags, skipping cleanup"
          fi
        done
        
    - name: Run garbage collection
      shell: bash
      env:
        REGISTRY_POD: ${{ secrets.REGISTRY_POD_NAME }}
        REGISTRY_NAMESPACE: ${{ secrets.REGISTRY_NAMESPACE }}
        DRY_RUN: ${{ github.event.inputs.dryRun || 'true' }}
        SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
      run: |
        if [ "$DRY_RUN" = "false" ]; then
          echo "Running garbage collection to reclaim space"
          echo "$SUDO_PASSWORD" | sudo -S kubectl -n $REGISTRY_NAMESPACE exec -it $REGISTRY_POD -- bin/registry garbage-collect /etc/docker/registry/config.yml --delete-untagged=true
        else
          echo "[DRY RUN] Would run garbage collection"
        fi 