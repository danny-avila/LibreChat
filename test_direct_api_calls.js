/**
 * –ü—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã –∫ Monday.com –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: MONDAY_API_KEY=–≤–∞—à_—Ç–æ–∫–µ–Ω node test_direct_api_calls.js
 */

const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiKey = process.env.MONDAY_API_KEY;

if (!apiKey) {
  console.error('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MONDAY_API_KEY');
  console.log('–ü—Ä–∏–º–µ—Ä: MONDAY_API_KEY=your_token node test_direct_api_calls.js');
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
function makeGraphQLRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify({
      query: query,
      variables: variables
    });

    const options = {
      hostname: 'api.monday.com',
      port: 443,
      path: '/v2',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': apiKey,
        'Content-Length': Buffer.byteLength(data)
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          if (result.errors) {
            reject(new Error(`GraphQL Error: ${JSON.stringify(result.errors)}`));
          } else {
            resolve(result);
          }
        } catch (error) {
          reject(new Error(`JSON Parse Error: ${error.message}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

async function testDirectAPICall() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ –∫ Monday.com...\n');

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫...');
    const boardsQuery = `
      query {
        boards(limit: 5) {
          id
          name
          columns {
            id
            title
            type
          }
        }
      }
    `;

    const boardsResult = await makeGraphQLRequest(boardsQuery);
    const boards = boardsResult.data.boards;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫: ${boards.length}`);

    if (boards.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫');
      return;
    }

    const testBoard = boards[0];
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É: "${testBoard.name}" (ID: ${testBoard.id})`);
    console.log(`üìä –ö–æ–ª–æ–Ω–∫–∏: ${testBoard.columns.map(c => `${c.title} (${c.type})`).join(', ')}`);

    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å–∫–∏
    console.log('\nüìã –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ—Å–∫–∏...');
    const itemsQuery = `
      query($boardId: ID!) {
        boards(ids: [$boardId]) {
          items(limit: 3) {
            id
            name
            column_values {
              id
              type
              text
              value
            }
          }
        }
      }
    `;

    const itemsResult = await makeGraphQLRequest(itemsQuery, { boardId: testBoard.id });
    let items = itemsResult.data.boards[0].items;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);

    // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω
    if (items.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç...');
      
      const createItemMutation = `
        mutation($boardId: ID!, $itemName: String!) {
          create_item(board_id: $boardId, item_name: $itemName) {
            id
            name
          }
        }
      `;

      const createResult = await makeGraphQLRequest(createItemMutation, {
        boardId: testBoard.id,
        itemName: `Test Item ${Date.now()}`
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: ${createResult.data.create_item.name}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–Ω–æ–≤–∞
      const newItemsResult = await makeGraphQLRequest(itemsQuery, { boardId: testBoard.id });
      items = newItemsResult.data.boards[0].items;
    }

    const testItem = items[0];
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç: "${testItem.name}" (ID: ${testItem.id})`);

    // –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    console.log('\nüìã –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...');

    // –ù–∞–π–¥–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const textColumn = testBoard.columns.find(c => c.type === 'text');
    const statusColumn = testBoard.columns.find(c => c.type === 'color' || c.type === 'status');
    const numberColumn = testBoard.columns.find(c => c.type === 'numeric');

    // –¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º change_simple_column_value)
    if (textColumn) {
      console.log(`\nüîÑ –¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ "${textColumn.title}"...`);
      
      const textMutation = `
        mutation($boardId: ID!, $itemId: ID!, $columnId: String!, $value: String!) {
          change_simple_column_value(board_id: $boardId, item_id: $itemId, column_id: $columnId, value: $value) {
            id
          }
        }
      `;

      const textValue = `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${new Date().toLocaleString()}`;
      await makeGraphQLRequest(textMutation, {
        boardId: testBoard.id,
        itemId: testItem.id,
        columnId: textColumn.id,
        value: textValue
      });

      console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: "${textValue}"`);
    }

    // –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º change_column_value —Å JSON)
    if (statusColumn) {
      console.log(`\nüîÑ –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–∫–∏ "${statusColumn.title}"...`);
      
      const statusMutation = `
        mutation($boardId: ID!, $itemId: ID!, $columnId: String!, $value: JSON!) {
          change_column_value(board_id: $boardId, item_id: $itemId, column_id: $columnId, value: $value) {
            id
          }
        }
      `;

      const statusValue = JSON.stringify({ index: 1 });
      await makeGraphQLRequest(statusMutation, {
        boardId: testBoard.id,
        itemId: testItem.id,
        columnId: statusColumn.id,
        value: statusValue
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º: 1`);
    }

    // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    if (numberColumn) {
      console.log(`\nüîÑ –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ "${numberColumn.title}"...`);
      
      const numberMutation = `
        mutation($boardId: ID!, $itemId: ID!, $columnId: String!, $value: String!) {
          change_simple_column_value(board_id: $boardId, item_id: $itemId, column_id: $columnId, value: $value) {
            id
          }
        }
      `;

      const numberValue = Math.floor(Math.random() * 1000).toString();
      await makeGraphQLRequest(numberMutation, {
        boardId: testBoard.id,
        itemId: testItem.id,
        columnId: numberColumn.id,
        value: numberValue
      });

      console.log(`‚úÖ –ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${numberValue}`);
    }

    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    const verifyResult = await makeGraphQLRequest(itemsQuery, { boardId: testBoard.id });
    const updatedItem = verifyResult.data.boards[0].items.find(item => item.id === testItem.id);

    console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:');
    updatedItem.column_values.forEach(col => {
      if (col.text && col.text.trim()) {
        const columnInfo = testBoard.columns.find(c => c.id === col.id);
        const columnTitle = columnInfo ? columnInfo.title : col.id;
        console.log(`   ${columnTitle}: "${col.text}"`);
      }
    });

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä—è–º—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    
    if (error.message.includes('GraphQL Error')) {
      console.log('\nüìã –≠—Ç–æ GraphQL –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
      console.log('   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Monday.com API');
      console.log('   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDirectAPICall()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
