const MondayTool = require('./MondayTool');

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è Monday.com API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç createItem –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º
 */
class MondayDiagnostic {
  constructor(apiKey) {
    this.mondayTool = new MondayTool({ apiKey });
    this.testResults = [];
  }

  log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const logEntry = { timestamp, type, message };
    this.testResults.push(logEntry);
    
    const prefix = {
      'info': 'üìã',
      'success': '‚úÖ',
      'error': '‚ùå',
      'warning': '‚ö†Ô∏è'
    }[type] || 'üìã';
    
    console.log(`${prefix} ${message}`);
  }

  async runDiagnostic() {
    this.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Monday.com API...');
    
    try {
      // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫
      const boards = await this.testGetBoards();
      
      if (boards && boards.length > 0) {
        const testBoard = boards[0];
        this.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤: ${testBoard.name} (ID: ${testBoard.id})`);
        
        // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        const columns = await this.testGetColumns(testBoard.id);
        
        // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–æ—Å–∫–∏
        const groups = await this.testGetGroups(testBoard.id);
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        await this.testSimpleCreateItem(testBoard.id, groups?.[0]?.id);
        
        // –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å column_values
        if (columns && columns.length > 0) {
          await this.testCreateItemWithColumns(testBoard.id, columns, groups?.[0]?.id);
        }
        
        // –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        await this.testGetItems(testBoard.id);
      }
      
      this.log('üéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      this.printSummary();
      
    } catch (error) {
      this.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
      throw error;
    }
  }

  async testGetBoards() {
    this.log('–¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫...');
    
    try {
      const result = await this.mondayTool._call({
        action: 'getBoards',
        limit: 10
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å–æ–∫: ${data.data.length}`, 'success');
        data.data.forEach((board, index) => {
          this.log(`   ${index + 1}. ${board.name} (ID: ${board.id}, State: ${board.state})`);
        });
        return data.data;
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å–∫–∏');
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫: ${error.message}`, 'error');
      return null;
    }
  }

  async testGetColumns(boardId) {
    this.log(`–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏ ${boardId}...`);
    
    try {
      const result = await this.mondayTool._call({
        action: 'getColumnsInfo',
        boardId: boardId
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${data.data.length}`, 'success');
        data.data.forEach((column, index) => {
          this.log(`   ${index + 1}. ${column.title} (ID: ${column.id}, Type: ${column.type})`);
        });
        return data.data;
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏');
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: ${error.message}`, 'error');
      return null;
    }
  }

  async testGetGroups(boardId) {
    this.log(`–¢–µ—Å—Ç 2.5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–æ—Å–∫–∏ ${boardId}...`);
    
    try {
      const result = await this.mondayTool._call({
        action: 'getBoard',
        boardId: boardId,
        includeGroups: true,
        includeColumns: false,
        includeItems: false
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data && data.data.groups) {
        this.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø: ${data.data.groups.length}`, 'success');
        data.data.groups.forEach((group, index) => {
          this.log(`   ${index + 1}. ${group.title} (ID: ${group.id})`);
        });
        return data.data.groups;
      } else {
        this.log(`‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, 'warning');
        return null;
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: ${error.message}`, 'error');
      return null;
    }
  }

  async testSimpleCreateItem(boardId, groupId) {
    this.log('–¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–±–µ–∑ column_values)...');
    
    try {
      const itemName = `–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç ${Date.now()}`;
      const params = {
        action: 'createItem',
        boardId: boardId,
        itemName: itemName
      };
      
      if (groupId) {
        params.groupId = groupId;
        this.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É: ${groupId}`);
      }
      
      this.log(`   –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç: ${itemName}`);
      this.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(params, null, 2)}`);
      
      const result = await this.mondayTool._call(params);
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${data.data.name} (ID: ${data.data.id})`, 'success');
        this.log(`   –ì—Ä—É–ø–ø–∞: ${data.data.group?.title || 'default'}`);
        return data.data.id;
      } else {
        this.log(`‚ùå –ù–µ—É–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è. –û—Ç–≤–µ—Ç: ${JSON.stringify(data)}`, 'error');
        return null;
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: ${error.message}`, 'error');
      this.log(`   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${error.stack}`, 'error');
      return null;
    }
  }

  async testCreateItemWithColumns(boardId, columns, groupId) {
    this.log('–¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å column_values...');
    
    // –ù–∞–π–¥–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const textColumn = columns.find(c => c.type === 'text');
    const numberColumn = columns.find(c => c.type === 'numbers');
    const statusColumn = columns.find(c => c.type === 'status');
    
    const columnValues = {};
    
    if (textColumn) {
      columnValues[textColumn.id] = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç";
      this.log(`   –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–ª–æ–Ω–∫—É: ${textColumn.title} (${textColumn.id})`);
    }
    
    if (numberColumn) {
      columnValues[numberColumn.id] = 42;
      this.log(`   –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–ª–æ–Ω–∫—É: ${numberColumn.title} (${numberColumn.id})`);
    }
    
    if (statusColumn) {
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç —Å label
      columnValues[statusColumn.id] = { "label": "Done" };
      this.log(`   –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–ª–æ–Ω–∫—É: ${statusColumn.title} (${statusColumn.id})`);
    }
    
    if (Object.keys(columnValues).length === 0) {
      this.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'warning');
      return;
    }
    
    try {
      const itemName = `–≠–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ ${Date.now()}`;
      const params = {
        action: 'createItem',
        boardId: boardId,
        itemName: itemName,
        columnValues: columnValues,
        createLabelsIfMissing: true
      };
      
      if (groupId) {
        params.groupId = groupId;
      }
      
      this.log(`   –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç: ${itemName}`);
      this.log(`   Column values: ${JSON.stringify(columnValues, null, 2)}`);
      this.log(`   –ü–æ–ª–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(params, null, 2)}`);
      
      const result = await this.mondayTool._call(params);
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω: ${data.data.name} (ID: ${data.data.id})`, 'success');
        this.log(`   –ö–æ–ª–æ–Ω–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${data.data.column_values?.length || 0}`);
        return data.data.id;
      } else {
        this.log(`‚ùå –ù–µ—É–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å column_values. –û—Ç–≤–µ—Ç: ${JSON.stringify(data)}`, 'error');
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å column_values: ${error.message}`, 'error');
      this.log(`   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${error.stack}`, 'error');
      
      // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      await this.testCreateItemSimpleColumns(boardId, columns, groupId);
    }
  }

  async testCreateItemSimpleColumns(boardId, columns, groupId) {
    this.log('–¢–µ—Å—Ç 4.1: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ column_values...');
    
    const textColumn = columns.find(c => c.type === 'text');
    
    if (!textColumn) {
      this.log('‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞', 'warning');
      return;
    }
    
    try {
      const columnValues = {
        [textColumn.id]: "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
      };
      
      const itemName = `–ü—Ä–æ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç ${Date.now()}`;
      const params = {
        action: 'createItem',
        boardId: boardId,
        itemName: itemName,
        columnValues: columnValues
      };
      
      if (groupId) {
        params.groupId = groupId;
      }
      
      this.log(`   –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ column values: ${JSON.stringify(columnValues, null, 2)}`);
      
      const result = await this.mondayTool._call(params);
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.log(`‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${data.data.name} (ID: ${data.data.id})`, 'success');
      } else {
        this.log(`‚ùå –î–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${JSON.stringify(data)}`, 'error');
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: ${error.message}`, 'error');
    }
  }

  async testGetItems(boardId) {
    this.log(`–¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ—Å–∫–∏ ${boardId}...`);
    
    try {
      const result = await this.mondayTool._call({
        action: 'getItems',
        boardId: boardId,
        limit: 5,
        columnValues: true
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.data.length}`, 'success');
        data.data.forEach((item, index) => {
          this.log(`   ${index + 1}. ${item.name} (ID: ${item.id})`);
        });
      } else {
        this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${JSON.stringify(data)}`, 'error');
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${error.message}`, 'error');
    }
  }

  printSummary() {
    this.log('\nüìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
    
    const successes = this.testResults.filter(r => r.type === 'success');
    const errors = this.testResults.filter(r => r.type === 'error');
    const warnings = this.testResults.filter(r => r.type === 'warning');
    
    this.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${successes.length}`, 'success');
    this.log(`‚ùå –û—à–∏–±–æ–∫: ${errors.length}`, errors.length > 0 ? 'error' : 'success');
    this.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.length}`, warnings.length > 0 ? 'warning' : 'success');
    
    if (errors.length > 0) {
      this.log('\nüîç –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:');
      errors.forEach((error, index) => {
        this.log(`   ${index + 1}. ${error.message}`, 'error');
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    this.saveResults();
  }

  saveResults() {
    const fs = require('fs');
    const resultsFile = `monday_diagnostic_${Date.now()}.json`;
    
    try {
      fs.writeFileSync(resultsFile, JSON.stringify({
        timestamp: new Date().toISOString(),
        results: this.testResults
      }, null, 2));
      
      this.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${resultsFile}`);
    } catch (error) {
      this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${error.message}`, 'error');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = { MondayDiagnostic };

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const apiKey = process.env.MONDAY_API_KEY || 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjk0MjExMjM5LCJhYWkiOjExLCJ1aWQiOjE3NzE5NjYwLCJpYWQiOiIyMDIwLTEyLTIzVDIwOjU4OjQ1LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSIsImFjdGlkIjo3Nzc1MTUwLCJyZ24iOiJ1c2UxIn0.Gg8pbEhIdLEwlVu4azaVQK137bVbUMSww__yqIR1kTM';
  
  if (!apiKey) {
    console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
  }
  
  const diagnostic = new MondayDiagnostic(apiKey);
  
  diagnostic.runDiagnostic()
    .then(() => {
      console.log('\nüéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    })
    .catch(error => {
      console.error('\nüí• –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error.message);
      process.exit(1);
    });
} 