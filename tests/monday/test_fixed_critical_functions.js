const MondayTool = require('./../../api/app/clients/tools/structured/MondayTool');

/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô MONDAY.COM API
 * –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
class FixedFunctionsTester {
  constructor(apiKey) {
    this.mondayTool = new MondayTool({ apiKey });
    this.testBoardId = '9261805849'; // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞
    this.results = [];
    this.errors = [];
    
    console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô MONDAY API');
    console.log('=' .repeat(70));
  }

  async runTest(functionName, testData, description) {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${functionName} - ${description}`);
    console.log('-'.repeat(50));
    
    try {
      const startTime = Date.now();
      const result = await this.mondayTool[functionName](testData);
      const duration = Date.now() - startTime;
      
      const parsedResult = JSON.parse(result);
      
      if (parsedResult.success) {
        console.log(`‚úÖ ${functionName}: –£–°–ü–ï–®–ù–û (${duration}ms)`);
        console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(parsedResult.data, null, 2).substring(0, 200)}...`);
        
        this.results.push({
          function: functionName,
          status: 'SUCCESS',
          duration,
          data: parsedResult.data
        });
        
        return parsedResult.data;
      } else {
        throw new Error('Function returned success: false');
      }
      
    } catch (error) {
      console.log(`‚ùå ${functionName}: –û–®–ò–ë–ö–ê`);
      console.log(`   üí• –î–µ—Ç–∞–ª–∏: ${error.message}`);
      
      this.errors.push({
        function: functionName,
        error: error.message,
        testData
      });
      
      this.results.push({
        function: functionName,
        status: 'ERROR',
        error: error.message
      });
      
      return null;
    }
  }

  async testFixedFunctions() {
    console.log('\nüîß –§–ê–ó–ê 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô');
    console.log('=' .repeat(70));
    
    // 1. –¢–µ—Å—Ç getItems - –ò–°–ü–†–ê–í–õ–ï–ù–ê
    console.log('\nüìù 1. –¢–ï–°–¢–ò–†–£–ï–ú getItems (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    const items = await this.runTest('getItems', {
      boardId: this.testBoardId,
      limit: 5,
      columnValues: true
    }, '–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ—Å–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫');

    // 2. –¢–µ—Å—Ç searchItems - –ò–°–ü–†–ê–í–õ–ï–ù–ê
    console.log('\nüîç 2. –¢–ï–°–¢–ò–†–£–ï–ú searchItems (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    await this.runTest('searchItems', {
      boardId: this.testBoardId,
      query: 'test',
      limit: 3
    }, '–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ');

    // 3. –¢–µ—Å—Ç updateColumn - –ò–°–ü–†–ê–í–õ–ï–ù–ê
    if (items && items.length > 0) {
      console.log('\nüìù 3. –¢–ï–°–¢–ò–†–£–ï–ú updateColumn (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
      const firstItem = items[0];
      
      // –ù–∞–π–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const textColumn = firstItem.column_values?.find(col => 
        col.type === 'text' || col.type === 'long-text'
      );
      
      if (textColumn) {
        await this.runTest('updateColumn', {
          boardId: this.testBoardId,
          itemId: firstItem.id,
          columnId: textColumn.id,
          value: `Updated ${new Date().toISOString()}`
        }, `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ ${textColumn.title}`);
      } else {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      }
    }

    // 4. –¢–µ—Å—Ç updateItem - –ò–°–ü–†–ê–í–õ–ï–ù–ê
    if (items && items.length > 0) {
      console.log('\nüìù 4. –¢–ï–°–¢–ò–†–£–ï–ú updateItem (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
      const firstItem = items[0];
      
      // –ù–∞–π–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const textColumn = firstItem.column_values?.find(col => 
        col.type === 'text' || col.type === 'long-text'
      );
      
      if (textColumn) {
        const columnValues = {};
        columnValues[textColumn.id] = `Batch update ${new Date().toISOString()}`;
        
        await this.runTest('updateItem', {
          boardId: this.testBoardId,
          itemId: firstItem.id,
          columnValues: columnValues
        }, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞');
      }
    }

    // 5. –¢–µ—Å—Ç createWebhook - –ò–°–ü–†–ê–í–õ–ï–ù–ê
    console.log('\nüîó 5. –¢–ï–°–¢–ò–†–£–ï–ú createWebhook (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    const webhook = await this.runTest('createWebhook', {
      boardId: this.testBoardId,
      url: 'https://webhook-test.com/test-endpoint',
      event: 'create_item',
      config: null
    }, '–°–æ–∑–¥–∞–Ω–∏–µ webhook –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞');

    // 6. –£–¥–∞–ª–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π webhook
    if (webhook && webhook.id) {
      console.log('\nüóëÔ∏è 6. –¢–ï–°–¢–ò–†–£–ï–ú deleteWebhook');
      await this.runTest('deleteWebhook', {
        webhookId: webhook.id
      }, '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ webhook');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    this.generateReport();
  }

  generateReport() {
    console.log('\n');
    console.log('=' .repeat(70));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô');
    console.log('=' .repeat(70));

    const successful = this.results.filter(r => r.status === 'SUCCESS').length;
    const failed = this.results.filter(r => r.status === 'ERROR').length;
    const total = this.results.length;

    console.log(`\n‚úÖ –£–°–ü–ï–®–ù–û: ${successful}/${total} (${Math.round(successful/total*100)}%)`);
    console.log(`‚ùå –û–®–ò–ë–ö–ò: ${failed}/${total} (${Math.round(failed/total*100)}%)`);

    if (this.errors.length > 0) {
      console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:');
      this.errors.forEach((error, index) => {
        console.log(`\n${index + 1}. ${error.function}:`);
        console.log(`   üí• ${error.error}`);
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const reportData = {
      timestamp: new Date().toISOString(),
      summary: {
        total,
        successful,
        failed,
        successRate: Math.round(successful/total*100)
      },
      results: this.results,
      errors: this.errors
    };

    const fs = require('fs');
    const reportPath = `fixed_functions_report_${Date.now()}.json`;
    fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
    
    console.log(`\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    
    if (successful === total) {
      console.log('\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
    } else {
      console.log(`\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: ${failed} —Ñ—É–Ω–∫—Ü–∏–π`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const apiKey = process.env.MONDAY_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå MONDAY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á: export MONDAY_API_KEY="your_api_key"');
    process.exit(1);
  }

  const tester = new FixedFunctionsTester(apiKey);
  await tester.testFixedFunctions();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = FixedFunctionsTester; 