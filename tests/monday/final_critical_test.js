const MondayTool = require('./../../api/app/clients/tools/structured/MondayTool');

/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô
 */
async function finalTest() {
  const apiKey = process.env.MONDAY_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå MONDAY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    process.exit(1);
  }

  const mondayTool = new MondayTool({ apiKey });
  const testBoardId = '9261805849';

  console.log('üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô MONDAY API');
  console.log('=' .repeat(60));

  let successCount = 0;
  let totalTests = 0;

  async function testFunction(name, testFn, description) {
    totalTests++;
    console.log(`\nüß™ ${totalTests}. –¢–µ—Å—Ç–∏—Ä—É–µ–º ${name} - ${description}`);
    try {
      await testFn();
      console.log(`‚úÖ ${name}: –£–°–ü–ï–®–ù–û!`);
      successCount++;
    } catch (error) {
      console.log(`‚ùå ${name}: –û–®–ò–ë–ö–ê - ${error.message}`);
    }
  }

  // –¢–µ—Å—Ç 1: getItems - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  await testFunction('getItems', async () => {
    const result = await mondayTool.getItems({
      boardId: testBoardId,
      limit: 3,
      columnValues: true
    });
    const parsed = JSON.parse(result);
    if (!parsed.success) throw new Error('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ success: false');
    console.log(`   üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${parsed.data.length}`);
  }, '–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏');

  // –¢–µ—Å—Ç 2: searchItems - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è  
  await testFunction('searchItems', async () => {
    const result = await mondayTool.searchItems({
      boardId: testBoardId,
      query: 'test',
      limit: 2
    });
    const parsed = JSON.parse(result);
    if (!parsed.success) throw new Error('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ success: false');
    console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${parsed.data.length}`);
  }, '–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –¥–æ—Å–∫–µ');

  // –¢–µ—Å—Ç 3: –ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  await testFunction('getBoards', async () => {
    const result = await mondayTool.getBoards({ limit: 2 });
    const parsed = JSON.parse(result);
    if (!parsed.success) throw new Error('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ success: false');
    console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫: ${parsed.data.length}`);
  }, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫');

  await testFunction('getBoard', async () => {
    const result = await mondayTool.getBoard({ 
      boardId: testBoardId,
      includeItems: false,
      includeGroups: true,
      includeColumns: true
    });
    const parsed = JSON.parse(result);
    if (!parsed.success) throw new Error('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ success: false');
    console.log(`   üìã –î–æ—Å–∫–∞: ${parsed.data.name}`);
  }, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å–∫–µ');

  await testFunction('createItem', async () => {
    const result = await mondayTool.createItem({
      boardId: testBoardId,
      itemName: `Final Test Item ${Date.now()}`
    });
    const parsed = JSON.parse(result);
    if (!parsed.success) throw new Error('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ success: false');
    console.log(`   ‚ûï –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: ${parsed.data.name}`);
  }, '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');

  await testFunction('getColumnsInfo', async () => {
    const result = await mondayTool.getColumnsInfo({ boardId: testBoardId });
    const parsed = JSON.parse(result);
    if (!parsed.success) throw new Error('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ success: false');
    console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${parsed.data.length}`);
  }, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö');

  await testFunction('getWorkspaces', async () => {
    const result = await mondayTool.getWorkspaces({ limit: 2 });
    const parsed = JSON.parse(result);
    if (!parsed.success) throw new Error('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ success: false');
    console.log(`   üè¢ –ù–∞–π–¥–µ–Ω–æ workspaces: ${parsed.data.length}`);
  }, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ workspaces');

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n');
  console.log('=' .repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('=' .repeat(60));
  
  const successRate = Math.round((successCount / totalTests) * 100);
  
  console.log(`‚úÖ –£–°–ü–ï–®–ù–û: ${successCount}/${totalTests} (${successRate}%)`);
  console.log(`‚ùå –û–®–ò–ë–ö–ò: ${totalTests - successCount}/${totalTests} (${100 - successRate}%)`);
  
  if (successRate >= 80) {
    console.log('\nüéâ –û–¢–õ–ò–ß–ù–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  } else if (successRate >= 60) {
    console.log('\n‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ß–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  } else {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ù–û: –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
  console.log('\nüìã –°–¢–ê–¢–£–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô:');
  console.log(`‚Ä¢ getItems: ${successCount >= 1 ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}`);
  console.log(`‚Ä¢ searchItems: ${successCount >= 2 ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}`);
  console.log('\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('‚Ä¢ updateItem –∏ updateColumn —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π');
  console.log('‚Ä¢ createWebhook —Ç—Ä–µ–±—É–µ—Ç HTTPS URL –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã');
  console.log('‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
}

finalTest().catch(console.error); 