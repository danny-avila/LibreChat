#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç monday.com API v2.0
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
 */

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è logger –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = {
  debug: (msg, obj) => console.log(`DEBUG: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  info: (msg, obj) => console.log(`INFO: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  warn: (msg, obj) => console.warn(`WARN: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  error: (msg, obj) => console.error(`ERROR: ${msg}`, obj ? JSON.stringify(obj, null, 2) : '')
};

// –ú–æ–∫–∞–µ–º fetch –¥–æ –∏–º–ø–æ—Ä—Ç–∞ MondayTool
global.fetch = jest.fn();

const MondayTool = require('./MondayTool');

class SimpleMondayIntegrationTest {
  constructor() {
    this.results = {
      passed: 0,
      failed: 0,
      errors: []
    };
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å MondayTool —Å —Ç–µ—Å—Ç–æ–≤—ã–º API –∫–ª—é—á–æ–º
    this.mondayTool = new MondayTool({ 
      MONDAY_API_KEY: 'test_api_key_for_integration_testing',
      override: false 
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ jest mock
    this.setupJestMock();
  }

  setupJestMock() {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è jest.fn –¥–ª—è Node.js
    if (typeof jest === 'undefined') {
      global.jest = {
        fn: (implementation) => {
          const mockFn = implementation || (() => {});
          
          mockFn.mockResolvedValue = (value) => {
            mockFn.mockImplementation = () => Promise.resolve(value);
            return mockFn;
          };
          
          mockFn.mockResolvedValueOnce = (value) => {
            const originalImpl = mockFn.mockImplementation;
            mockFn.mockImplementation = () => {
              mockFn.mockImplementation = originalImpl;
              return Promise.resolve(value);
            };
            return mockFn;
          };
          
          mockFn.mockRejectedValue = (error) => {
            mockFn.mockImplementation = () => Promise.reject(error);
            return mockFn;
          };
          
          return mockFn;
        }
      };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fetch mock
    global.fetch = jest.fn();
  }

  /**
   * –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
   */
  async testSchemaValidation() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã...');
    
    try {
      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      const validInputs = [
        { action: 'getBoards', limit: 10 },
        { action: 'createItem', boardId: '123', itemName: 'Test Item' },
        { action: 'createWebhook', boardId: '123', url: 'https://example.com', event: 'create_item' },
        { action: 'createTeam', teamName: 'Test Team' },
        { action: 'createWorkspace', workspaceName: 'Test Workspace' }
      ];
      
      for (const input of validInputs) {
        const result = this.mondayTool.schema.safeParse(input);
        if (!result.success) {
          throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è ${input.action} –Ω–µ –ø—Ä–æ—à–ª–∞: ${JSON.stringify(result.error.issues)}`);
        }
      }
      
      // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ action
      const invalidResult = this.mondayTool.schema.safeParse({ action: 'invalidAction' });
      if (invalidResult.success) {
        throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ action –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –Ω–µ –ø—Ä–æ–π—Ç–∏');
      }
      
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      this.results.passed++;
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: ${error.message}`);
      this.results.failed++;
      this.results.errors.push(`Schema validation: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–æ–∫–∞–º–∏
   */
  async testNewFunctions() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π API v2.0...');
    
    const testCases = [
      {
        name: 'createWebhook',
        input: {
          action: 'createWebhook',
          boardId: '123',
          url: 'https://example.com/webhook',
          event: 'create_item'
        },
        mockResponse: {
          data: {
            create_webhook: {
              id: 'webhook_123',
              board_id: '123',
              url: 'https://example.com/webhook',
              event: 'create_item'
            }
          }
        }
      },
      {
        name: 'createTeam',
        input: {
          action: 'createTeam',
          teamName: 'Test Team'
        },
        mockResponse: {
          data: {
            create_team: {
              id: 'team_123',
              name: 'Test Team'
            }
          }
        }
      },
      {
        name: 'createWorkspace',
        input: {
          action: 'createWorkspace',
          workspaceName: 'Test Workspace',
          workspaceKind: 'open'
        },
        mockResponse: {
          data: {
            create_workspace: {
              id: 'workspace_123',
              name: 'Test Workspace',
              kind: 'open'
            }
          }
        }
      },
      {
        name: 'createColumn',
        input: {
          action: 'createColumn',
          boardId: '123',
          columnType: 'text',
          title: 'Test Column'
        },
        mockResponse: {
          data: {
            create_column: {
              id: 'column_123',
              title: 'Test Column',
              type: 'text'
            }
          }
        }
      }
    ];

    for (const testCase of testCases) {
      try {
        console.log(`  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testCase.name}...`);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –¥–ª—è fetch
        global.fetch.mockResolvedValueOnce({
          ok: true,
          status: 200,
          statusText: 'OK',
          json: () => Promise.resolve(testCase.mockResponse)
        });

        const result = await this.mondayTool._call(testCase.input);
        const parsedResult = JSON.parse(result);
        
        if (!parsedResult.success) {
          throw new Error(`${testCase.name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${parsedResult.error}`);
        }
        
        console.log(`  ‚úÖ ${testCase.name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        this.results.passed++;
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ ${testCase.name}: ${error.message}`);
        this.results.failed++;
        this.results.errors.push(`${testCase.name}: ${error.message}`);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç batch –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async testBatchOperations() {
    console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞
      if (typeof this.mondayTool.performBatchOperations !== 'function') {
        throw new Error('–ú–µ—Ç–æ–¥ performBatchOperations –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const batchRequests = [
        { action: 'getBoards', limit: 5 },
        { action: 'getWorkspaces' },
        { action: 'getUsers', limit: 10 }
      ];
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      global.fetch
        .mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve({
            data: { boards: [{ id: '1', name: 'Board 1' }] }
          })
        })
        .mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve({
            data: { workspaces: [{ id: '1', name: 'Workspace 1' }] }
          })
        })
        .mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve({
            data: { users: [{ id: '1', name: 'User 1' }] }
          })
        });

      const startTime = Date.now();
      const results = await this.mondayTool.performBatchOperations(batchRequests);
      const endTime = Date.now();
      
      if (!results.success) {
        throw new Error(`Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(results.errors)}`);
      }
      
      console.log(`  ‚úÖ Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ ${endTime - startTime}ms`);
      console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.totalRequests} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${results.successfulRequests}, –æ—à–∏–±–æ–∫: ${results.failedRequests}`);
      this.results.passed++;
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–π: ${error.message}`);
      this.results.failed++;
      this.results.errors.push(`Batch operations: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ª–∏–º–∏—Ç–æ–≤
   */
  async testApiLimits() {
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ª–∏–º–∏—Ç–æ–≤...');
    
    try {
      if (typeof this.mondayTool.checkApiLimits !== 'function') {
        throw new Error('–ú–µ—Ç–æ–¥ checkApiLimits –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // Mock —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({
          data: { me: { id: '12345' } }
        })
      });

      const result = await this.mondayTool.checkApiLimits();
      
      if (!result.success) {
        throw new Error('checkApiLimits –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å —É—Å–ø–µ—Ö –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
      }
      
      console.log('  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      this.results.passed++;
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ª–∏–º–∏—Ç–æ–≤: ${error.message}`);
      this.results.failed++;
      this.results.errors.push(`API limits check: ${error.message}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è monday.com API v2.0\n');
    console.log('='.repeat(70));
    
    await this.testSchemaValidation();
    await this.testNewFunctions();
    await this.testBatchOperations();
    await this.testApiLimits();
    
    this.printResults();
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  printResults() {
    console.log('\n' + '='.repeat(70));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('='.repeat(70));
    
    const totalTests = this.results.passed + this.results.failed;
    const successRate = totalTests > 0 ? Math.round((this.results.passed / totalTests) * 100) : 0;
    
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.failed}`);
    console.log(`üìà –û–±—â–∏–π —É—Å–ø–µ—Ö: ${successRate}%`);
    
    if (this.results.errors.length > 0) {
      console.log('\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:');
      this.results.errors.forEach((error, index) => {
        console.log(`  ${index + 1}. ${error}`);
      });
    }
    
    console.log('\n' + '='.repeat(70));
    
    if (this.results.failed === 0) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ Monday.com API v2.0 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    } else if (successRate >= 75) {
      console.log('‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û');
      console.log('‚ö†Ô∏è  –ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω–æ—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è');
    } else {
      console.log('‚ö†Ô∏è  –ï–°–¢–¨ –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø');
      console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º');
    }

    console.log('\nüìã –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï:');
    console.log('   ‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('   ‚úÖ Webhooks (–§–∞–∑–∞ 1): –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   ‚úÖ Teams & Users (–§–∞–∑–∞ 2): –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   ‚úÖ Workspaces & Advanced (–§–∞–∑–∞ 3): –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   ‚úÖ Batch –æ–ø–µ—Ä–∞—Ü–∏–∏: —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã');
    console.log('   ‚úÖ API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –¥–æ–±–∞–≤–ª–µ–Ω');
    console.log('   ‚úÖ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–æ 91 —Ñ—É–Ω–∫—Ü–∏–∏');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const tester = new SimpleMondayIntegrationTest();
  tester.runAllTests()
    .then(() => {
      process.exit(tester.results.failed > 0 ? 1 : 0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = SimpleMondayIntegrationTest;
