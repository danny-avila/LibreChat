const MondayTool = require('./../../api/app/clients/tools/structured/MondayTool');

/**
 * –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–û–ö GRAPHQL –í MONDAY API
 */
class GraphQLErrorAnalyzer {
  constructor(apiKey) {
    this.mondayTool = new MondayTool({ apiKey });
    this.testBoardId = '9261805849';
  }

  async analyzeGraphQLError(query, variables, description) {
    console.log(`\nüîç –ê–ù–ê–õ–ò–ó: ${description}`);
    console.log('=' .repeat(50));
    console.log('üìù GraphQL Query:');
    console.log(query);
    console.log('\nüìä Variables:');
    console.log(JSON.stringify(variables, null, 2));
    
    try {
      const result = await this.mondayTool.makeGraphQLRequest(query, variables);
      console.log('‚úÖ –£–°–ü–ï–®–ù–û!');
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
      return result;
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê!');
      console.log('üí• –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
      if (error.response && error.response.data) {
        console.log('üîé –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ API:');
        console.log(JSON.stringify(error.response.data, null, 2));
      }
      
      return null;
    }
  }

  async runAnalysis() {
    console.log('üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó GRAPHQL –û–®–ò–ë–û–ö');
    console.log('=' .repeat(70));

    // 1. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫
    await this.analyzeGraphQLError(
      `query {
        boards(limit: 1) {
          id
          name
        }
      }`,
      {},
      '–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫'
    );

    // 2. –¢–µ—Å—Ç getItems —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    await this.analyzeGraphQLError(
      `query getItems($boardId: [ID!]!) {
        boards(ids: $boardId) {
          id
          name
          items_page(limit: 1) {
            items {
              id
              name
            }
          }
        }
      }`,
      { boardId: [this.testBoardId] },
      '–ü—Ä–æ—Å—Ç–æ–π getItems —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏'
    );

    // 3. –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Board ID
    await this.analyzeGraphQLError(
      `query testBoard($boardId: ID!) {
        boards(ids: [$boardId]) {
          id
          name
          state
        }
      }`,
      { boardId: this.testBoardId },
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏'
    );

    // 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è webhook —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await this.analyzeGraphQLError(
      `mutation {
        create_webhook(
          board_id: ${this.testBoardId},
          url: "https://webhook.site/test",
          event: create_item
        ) {
          id
        }
      }`,
      {},
      '–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ webhook –±–µ–∑ variables'
    );

    // 5. –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    await this.analyzeGraphQLError(
      `query {
        me {
          id
          name
          email
        }
      }`,
      {},
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ API –∫–ª—é—á–∞'
    );
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  const apiKey = process.env.MONDAY_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå MONDAY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    process.exit(1);
  }

  const analyzer = new GraphQLErrorAnalyzer(apiKey);
  await analyzer.runAnalysis();
}

main().catch(console.error); 