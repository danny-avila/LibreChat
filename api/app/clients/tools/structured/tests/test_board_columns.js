const MondayTool = require('./MondayTool');

async function testBoardColumns() {
  const apiKey = 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjk0MjExMjM5LCJhYWkiOjExLCJ1aWQiOjE3NzE5NjYwLCJpYWQiOiIyMDIwLTEyLTIzVDIwOjU4OjQ1LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSIsImFjdGlkIjo3Nzc1MTUwLCJyZ24iOiJ1c2UxIn0.Gg8pbEhIdLEwlVu4azaVQK137bVbUMSww__yqIR1kTM';
  const testBoardId = '9261805849';
  
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ...\n');

  try {
    const mondayTool = new MondayTool({ apiKey });
    const result = await mondayTool._call({
      action: 'getColumnsInfo',
      boardId: testBoardId
    });

    const parsed = JSON.parse(result);
    if (parsed.success) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏:');
      parsed.data.forEach((column, index) => {
        console.log(`${index + 1}. ID: "${column.id}" | –ù–∞–∑–≤–∞–Ω–∏–µ: "${column.title}" | –¢–∏–ø: ${column.type}`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', parsed.error);
    }
  } catch (error) {
    console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
  }
}

testBoardColumns(); 