const MondayTool = require('./MondayTool');

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Monday.com API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤–æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö
 */
class MondayAPITester {
  constructor(apiKey) {
    this.mondayTool = new MondayTool({ apiKey });
    this.testBoardId = '9261805849'; // Test Board Created by Tool
    this.results = [];
    this.createdItems = [];
  }

  log(message, status = 'info') {
    const timestamp = new Date().toISOString();
    const result = { timestamp, status, message };
    this.results.push(result);
    
    const emoji = {
      'success': '‚úÖ',
      'error': '‚ùå', 
      'warning': '‚ö†Ô∏è',
      'info': 'üìã'
    }[status] || 'üìã';
    
    console.log(`${emoji} ${message}`);
  }

  async runAllTests() {
    this.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Monday.com API...\n');
    
    try {
      // –ì—Ä—É–ø–ø–∞ 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–æ—Å–∫–∞–º–∏
      await this.testBoardOperations();
      
      // –ì—Ä—É–ø–ø–∞ 2: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      await this.testItemOperations();
      
      // –ì—Ä—É–ø–ø–∞ 3: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
      await this.testStructureOperations();
      
      // –ì—Ä—É–ø–ø–∞ 4: –ü–æ–∏—Å–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      await this.testDataRetrieval();
      
      // –ì—Ä—É–ø–ø–∞ 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      await this.testAdditionalOperations();
      
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.cleanup();
      
      this.printSummary();
      
    } catch (error) {
      this.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
  }

  async testBoardOperations() {
    this.log('\nüìã === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –° –î–û–°–ö–ê–ú–ò ===\n');
    
    // –¢–µ—Å—Ç 1: getBoards (—É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    await this.testFunction('getBoards', {
      action: 'getBoards',
      limit: 5
    });
    
    // –¢–µ—Å—Ç 2: getBoard - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å–∫–∏
    await this.testFunction('getBoard', {
      action: 'getBoard',
      boardId: this.testBoardId,
      includeGroups: true,
      includeColumns: true,
      includeItems: false
    });
    
    // –¢–µ—Å—Ç 3: getWorkspaces
    await this.testFunction('getWorkspaces', {
      action: 'getWorkspaces',
      limit: 5
    });
    
    // –¢–µ—Å—Ç 4: getColumnsInfo
    await this.testFunction('getColumnsInfo', {
      action: 'getColumnsInfo',
      boardId: this.testBoardId
    });
  }

  async testItemOperations() {
    this.log('\nüìã === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –° –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò ===\n');
    
    // –¢–µ—Å—Ç 5: createItem (–ø—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ)
    const simpleItem = await this.testFunction('createItem (–ø—Ä–æ—Å—Ç–æ–µ)', {
      action: 'createItem',
      boardId: this.testBoardId,
      itemName: `–¢–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ${Date.now()}`
    });
    
    if (simpleItem && simpleItem.data && simpleItem.data.id) {
      this.createdItems.push(simpleItem.data.id);
    }
    
    // –¢–µ—Å—Ç 6: createItem —Å column_values
    const advancedItem = await this.testFunction('createItem (—Å –¥–∞–Ω–Ω—ã–º–∏)', {
      action: 'createItem',
      boardId: this.testBoardId,
      itemName: `–≠–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ ${Date.now()}`,
      columnValues: {
        // –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        'text': '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        'numbers': 42
      },
      createLabelsIfMissing: true
    });
    
    if (advancedItem && advancedItem.data && advancedItem.data.id) {
      this.createdItems.push(advancedItem.data.id);
    }
    
    // –¢–µ—Å—Ç 7: getItems
    await this.testFunction('getItems', {
      action: 'getItems',
      boardId: this.testBoardId,
      limit: 5,
      includeColumnValues: true
    });
    
    // –¢–µ—Å—Ç 8: updateItem (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
    if (this.createdItems.length > 0) {
      await this.testFunction('updateItem', {
        action: 'updateItem',
        boardId: this.testBoardId,
        itemId: this.createdItems[0],
        columnValues: {
          'text': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
        }
      });
    }
  }

  async testStructureOperations() {
    this.log('\nüìã === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–ù–´–• –û–ü–ï–†–ê–¶–ò–ô ===\n');
    
    // –¢–µ—Å—Ç 9: createGroup
    const newGroup = await this.testFunction('createGroup', {
      action: 'createGroup',
      boardId: this.testBoardId,
      groupName: `–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ ${Date.now()}`,
      color: '#FF0000'
    });
    
    // –¢–µ—Å—Ç 10: updateColumn (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã)
    if (this.createdItems.length > 0) {
      await this.testFunction('updateColumn', {
        action: 'updateColumn',
        boardId: this.testBoardId,
        itemId: this.createdItems[0],
        columnId: 'text',
        value: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏'
      });
    }
    
    // –¢–µ—Å—Ç 11: addComment (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã)
    if (this.createdItems.length > 0) {
      await this.testFunction('addComment', {
        action: 'addComment',
        itemId: this.createdItems[0],
        body: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç API'
      });
    }
  }

  async testDataRetrieval() {
    this.log('\nüìã === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===\n');
    
    // –¢–µ—Å—Ç 12: searchItems
    await this.testFunction('searchItems', {
      action: 'searchItems',
      boardId: this.testBoardId,
      query: '–¢–µ—Å—Ç–æ–≤—ã–π',
      limit: 5
    });
    
    // –¢–µ—Å—Ç 13: getUsers
    await this.testFunction('getUsers', {
      action: 'getUsers',
      limit: 5
    });
  }

  async testAdditionalOperations() {
    this.log('\nüìã === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –û–ü–ï–†–ê–¶–ò–ô ===\n');
    
    // –¢–µ—Å—Ç 14: getUsersExtended
    await this.testFunction('getUsersExtended', {
      action: 'getUsersExtended',
      limit: 5
    });
    
    // –¢–µ—Å—Ç 15: getAccount
    await this.testFunction('getAccount', {
      action: 'getAccount'
    });
  }

  async testFunction(name, params) {
    this.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${name}...`);
    
    try {
      const result = await this.mondayTool._call(params);
      const data = JSON.parse(result);
      
      if (data.success) {
        this.log(`‚úÖ ${name}: –£—Å–ø–µ—à–Ω–æ`, 'success');
        if (data.data) {
          if (Array.isArray(data.data)) {
            this.log(`   –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.data.length}`);
          } else if (data.data.id) {
            this.log(`   ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${data.data.id}`);
          }
        }
        return data;
      } else {
        this.log(`‚ùå ${name}: –ù–µ—É—Å–ø–µ—à–Ω–æ - ${data.error}`, 'error');
        return null;
      }
    } catch (error) {
      this.log(`‚ùå ${name}: –û—à–∏–±–∫–∞ - ${error.message}`, 'error');
      return null;
    }
  }

  async cleanup() {
    this.log('\nüìã === –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===\n');
    
    for (const itemId of this.createdItems) {
      try {
        await this.testFunction(`deleteItem (${itemId})`, {
          action: 'deleteItem',
          itemId: itemId
        });
      } catch (error) {
        this.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç ${itemId}`, 'warning');
      }
    }
  }

  printSummary() {
    this.log('\nüìä === –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===\n');
    
    const successful = this.results.filter(r => r.status === 'success');
    const errors = this.results.filter(r => r.status === 'error');
    const warnings = this.results.filter(r => r.status === 'warning');
    
    this.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successful.length}`, 'success');
    this.log(`‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${errors.length}`, errors.length > 0 ? 'error' : 'success');
    this.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.length}`, warnings.length > 0 ? 'warning' : 'success');
    
    if (errors.length > 0) {
      this.log('\nüîç –§—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏:');
      errors.forEach((error, index) => {
        this.log(`   ${index + 1}. ${error.message}`, 'error');
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.saveResults();
  }

  saveResults() {
    const fs = require('fs');
    const resultsFile = `monday_all_functions_test_${Date.now()}.json`;
    
    try {
      fs.writeFileSync(resultsFile, JSON.stringify({
        timestamp: new Date().toISOString(),
        total_tests: this.results.length,
        successful: this.results.filter(r => r.status === 'success').length,
        errors: this.results.filter(r => r.status === 'error').length,
        warnings: this.results.filter(r => r.status === 'warning').length,
        results: this.results
      }, null, 2));
      
      this.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${resultsFile}`);
    } catch (error) {
      this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${error.message}`, 'error');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const apiKey = 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjk0MjExMjM5LCJhYWkiOjExLCJ1aWQiOjE3NzE5NjYwLCJpYWQiOiIyMDIwLTEyLTIzVDIwOjU4OjQ1LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSIsImFjdGlkIjo3Nzc1MTUwLCJyZ24iOiJ1c2UxIn0.Gg8pbEhIdLEwlVu4azaVQK137bVbUMSww__yqIR1kTM';

const tester = new MondayAPITester(apiKey);
tester.runAllTests(); 