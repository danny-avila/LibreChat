#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π monday.com API
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è logger –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = {
  debug: (msg, obj) => console.log(`DEBUG: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  info: (msg, obj) => console.log(`INFO: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  warn: (msg, obj) => console.warn(`WARN: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  error: (msg, obj) => console.error(`ERROR: ${msg}`, obj ? JSON.stringify(obj, null, 2) : '')
};

// Mock fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
global.fetch = require('node-fetch');

// –ó–∞–≥—Ä—É–∂–∞–µ–º MondayTool
const MondayTool = require('./MondayTool');

class MondayFixTester {
  constructor(apiKey) {
    this.apiKey = apiKey || process.env.MONDAY_API_KEY;
    if (!this.apiKey) {
      throw new Error('MONDAY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    this.mondayTool = new MondayTool({ 
      MONDAY_API_KEY: this.apiKey
    });
    
    this.testBoardId = null;
    this.testGroupId = null;
    this.testItemId = null;
  }

  async runTests() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π monday.com API...\n');
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      await this.testGetBoards();
      
      // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
      await this.testCreateGroup();
      
      // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      await this.testCreateItem();
      
      // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
      await this.testUpdateItem();
      
      // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      await this.testAddComment();
      
      console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      
    } catch (error) {
      console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
    }
  }

  async testGetBoards() {
    console.log('üìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫...');
    
    try {
      const result = await this.mondayTool._call({
        action: 'getBoards',
        limit: 5
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data.length > 0) {
        this.testBoardId = data.data[0].id;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${data.data.length} –¥–æ—Å–æ–∫`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É: ${data.data[0].name} (ID: ${this.testBoardId})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–µ—Ä–≤–æ–π –¥–æ—Å–∫–∏
        if (data.data[0].groups && data.data[0].groups.length > 0) {
          this.testGroupId = data.data[0].groups[0].id;
          console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É: ${data.data[0].groups[0].title} (ID: ${this.testGroupId})`);
        }
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å–æ–∫:', error.message);
      throw error;
    }
  }

  async testCreateGroup() {
    console.log('\nüìã –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã...');
    
    if (!this.testBoardId) {
      console.log('‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–æ—Å–∫–∏');
      return;
    }
    
    try {
      const result = await this.mondayTool._call({
        action: 'createGroup',
        boardId: this.testBoardId,
        groupName: `Test Group ${Date.now()}`
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.testGroupId = data.data.id;
        console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ${data.data.title} (ID: ${data.data.id})`);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error.message);
      
      // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
      if (this.testGroupId) {
        console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É: ${this.testGroupId}`);
      }
    }
  }

  async testCreateItem() {
    console.log('\nüìã –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞...');
    
    if (!this.testBoardId) {
      console.log('‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–æ—Å–∫–∏');
      return;
    }
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ column_values —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const columnValues = {
        // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ - –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        // text: "Test text value",
        
        // –°—Ç–∞—Ç—É—Å - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å label
        // status: { label: "Working on it" },
        
        // –î–∞—Ç–∞ - —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        // date: { date: "2024-01-15" },
        
        // –ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ
        // numbers: 123
      };
      
      const result = await this.mondayTool._call({
        action: 'createItem',
        boardId: this.testBoardId,
        itemName: `Test Item ${Date.now()}`,
        groupId: this.testGroupId,
        columnValues: Object.keys(columnValues).length > 0 ? columnValues : undefined
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        this.testItemId = data.data.id;
        console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${data.data.name} (ID: ${data.data.id})`);
        console.log(`   –í –≥—Ä—É–ø–ø–µ: ${data.data.group?.title || 'default'}`);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', error.message);
      throw error;
    }
  }

  async testUpdateItem() {
    console.log('\nüìã –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞...');
    
    if (!this.testBoardId || !this.testItemId) {
      console.log('‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
      return;
    }
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const columnValues = {
        // text: "Updated text value"
      };
      
      const result = await this.mondayTool._call({
        action: 'updateItem',
        boardId: this.testBoardId,
        itemId: this.testItemId,
        columnValues: columnValues
      });
      
      const data = JSON.parse(result);
      if (data.success) {
        console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', error.message);
    }
  }

  async testAddComment() {
    console.log('\nüìã –¢–µ—Å—Ç 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
    
    if (!this.testItemId) {
      console.log('‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
      return;
    }
    
    try {
      const result = await this.mondayTool._call({
        action: 'addComment',
        itemId: this.testItemId,
        body: `Test comment at ${new Date().toISOString()}`
      });
      
      const data = JSON.parse(result);
      if (data.success && data.data) {
        console.log(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: ${data.data.id})`);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  try {
    const tester = new MondayFixTester();
    await tester.runTests();
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = MondayFixTester; 