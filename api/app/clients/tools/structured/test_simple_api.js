const fetch = require('node-fetch');

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Monday.com API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
async function testMondayAPI() {
  const apiKey = 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjk0MjExMjM5LCJhYWkiOjExLCJ1aWQiOjE3NzE5NjYwLCJpYWQiOiIyMDIwLTEyLTIzVDIwOjU4OjQ1LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSIsImFjdGlkIjo3Nzc1MTUwLCJyZ24iOiJ1c2UxIn0.Gg8pbEhIdLEwlVu4azaVQK137bVbUMSww__yqIR1kTM';
  const apiUrl = 'https://api.monday.com/v2';

  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Monday.com API...\n');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –≤–µ—Ä—Å–∏–∏ –∏ account
  await testAccount(apiKey, apiUrl);

  // –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å–æ–∫
  await testSimpleBoards(apiKey, apiUrl);

  // –¢–µ—Å—Ç 3: –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å–æ–∫
  await testMinimalBoards(apiKey, apiUrl);

  // –¢–µ—Å—Ç 4: –ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –±–µ–∑ GraphQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  await testDirectBoards(apiKey, apiUrl);
}

async function testAccount(apiKey, apiUrl) {
  console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ account...');
  
  const query = `
    query {
      account {
        id
        name
        plan {
          max_users
          version
        }
      }
    }
  `;

  try {
    const result = await makeRequest(apiKey, apiUrl, query, {});
    console.log('‚úÖ Account –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(result, null, 2));
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ account:', error.message);
  }
}

async function testSimpleBoards(apiKey, apiUrl) {
  console.log('\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å–æ–∫...');
  
  const query = `
    query {
      boards(limit: 5) {
        id
        name
      }
    }
  `;

  try {
    const result = await makeRequest(apiKey, apiUrl, query, {});
    console.log('‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –¥–æ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', JSON.stringify(result, null, 2));
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ—Å–æ–∫:', error.message);
  }
}

async function testMinimalBoards(apiKey, apiUrl) {
  console.log('\nüìã –¢–µ—Å—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å–æ–∫ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏...');
  
  const query = `
    query getBoards($limit: Int!) {
      boards(limit: $limit) {
        id
        name
        state
      }
    }
  `;

  const variables = {
    limit: 5
  };

  try {
    const result = await makeRequest(apiKey, apiUrl, query, variables);
    console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–æ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', JSON.stringify(result, null, 2));
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–æ—Å–æ–∫:', error.message);
  }
}

async function testDirectBoards(apiKey, apiUrl) {
  console.log('\nüìã –¢–µ—Å—Ç 4: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');
  
  const query = `{
    boards(limit: 3) {
      id
      name
      description
      state
    }
  }`;

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'API-Version': '2024-01'
      },
      body: JSON.stringify({ query })
    });

    console.log('üìä HTTP —Å—Ç–∞—Ç—É—Å:', response.status, response.statusText);
    console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));

    const data = await response.json();
    
    if (data.errors) {
      console.log('‚ùå GraphQL –æ—à–∏–±–∫–∏:', JSON.stringify(data.errors, null, 2));
    } else {
      console.log('‚úÖ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', JSON.stringify(data, null, 2));
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

async function makeRequest(apiKey, apiUrl, query, variables) {
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`,
      'API-Version': '2024-01'
    },
    body: JSON.stringify({ query, variables })
  });

  console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`HTTP ${response.status}: ${errorText}`);
  }

  const data = await response.json();
  
  if (data.errors) {
    throw new Error(`GraphQL Error: ${JSON.stringify(data.errors)}`);
  }
  
  return data.data;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testMondayAPI()
  .then(() => {
    console.log('\nüéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  })
  .catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }); 