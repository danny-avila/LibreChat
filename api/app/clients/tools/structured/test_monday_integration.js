#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ monday.com API v2.0
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */

const MondayTool = require('./MondayTool');

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è logger –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = {
  debug: (msg, obj) => console.log(`DEBUG: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  info: (msg, obj) => console.log(`INFO: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  warn: (msg, obj) => console.warn(`WARN: ${msg}`, obj ? JSON.stringify(obj, null, 2) : ''),
  error: (msg, obj) => console.error(`ERROR: ${msg}`, obj ? JSON.stringify(obj, null, 2) : '')
};

// Mock fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
const mockFetch = (mockResponse) => {
  global.fetch = jest.fn(() => 
    Promise.resolve({
      ok: true,
      json: () => Promise.resolve(mockResponse)
    })
  );
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ fetch
const restoreFetch = () => {
  if (global.fetch && global.fetch.mockRestore) {
    global.fetch.mockRestore();
  }
};

class MondayIntegrationTester {
  constructor() {
    this.results = {
      passed: 0,
      failed: 0,
      errors: []
    };
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å MondayTool
    this.mondayTool = new MondayTool({ 
      MONDAY_API_KEY: 'test_api_key_for_integration_testing',
      override: false 
    });
  }

  /**
   * –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
   */
  async testSchemaValidation() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã...');
    
    try {
      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      const validInput = {
        action: 'getBoards',
        limit: 10
      };
      
      const validResult = this.mondayTool.schema.safeParse(validInput);
      if (!validResult.success) {
        throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: ${JSON.stringify(validResult.error)}`);
      }
      
      // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ action
      const invalidInput = {
        action: 'invalidAction'
      };
      
      const invalidResult = this.mondayTool.schema.safeParse(invalidInput);
      if (invalidResult.success) {
        throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –Ω–µ –ø—Ä–æ–π—Ç–∏');
      }
      
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      this.results.passed++;
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: ${error.message}`);
      this.results.failed++;
      this.results.errors.push(`Schema validation: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –§–ê–ó–´ 1: Webhooks
   */
  async testWebhookFunctions() {
    console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Webhooks (–§–∞–∑–∞ 1)...');
    
    const testCases = [
      {
        name: 'createWebhook',
        input: {
          action: 'createWebhook',
          boardId: '123',
          url: 'https://example.com/webhook',
          event: 'create_item'
        },
        mockResponse: {
          data: {
            create_webhook: {
              id: 'webhook_123',
              board_id: '123',
              url: 'https://example.com/webhook',
              event: 'create_item'
            }
          }
        }
      },
      {
        name: 'getWebhooks',
        input: {
          action: 'getWebhooks',
          boardId: '123'
        },
        mockResponse: {
          data: {
            webhooks: [
              {
                id: 'webhook_123',
                board_id: '123',
                url: 'https://example.com/webhook',
                event: 'create_item'
              }
            ]
          }
        }
      }
    ];

    for (const testCase of testCases) {
      try {
        console.log(`  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testCase.name}...`);
        
        // Mock fetch response
        global.fetch = jest.fn(() => 
          Promise.resolve({
            ok: true,
            json: () => Promise.resolve(testCase.mockResponse)
          })
        );

        const result = await this.mondayTool._call(testCase.input);
        const parsedResult = JSON.parse(result);
        
        if (!parsedResult.success) {
          throw new Error(`${testCase.name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${parsedResult.error}`);
        }
        
        console.log(`  ‚úÖ ${testCase.name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        this.results.passed++;
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ ${testCase.name}: ${error.message}`);
        this.results.failed++;
        this.results.errors.push(`${testCase.name}: ${error.message}`);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –§–ê–ó–´ 2: Teams & Users
   */
  async testTeamsFunctions() {
    console.log('\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Teams & Users (–§–∞–∑–∞ 2)...');
    
    const testCases = [
      {
        name: 'createTeam',
        input: {
          action: 'createTeam',
          teamName: 'Test Team'
        },
        mockResponse: {
          data: {
            create_team: {
              id: 'team_123',
              name: 'Test Team'
            }
          }
        }
      },
      {
        name: 'getAccount',
        input: {
          action: 'getAccount'
        },
        mockResponse: {
          data: {
            account: {
              id: 'account_123',
              name: 'Test Account'
            }
          }
        }
      }
    ];

    for (const testCase of testCases) {
      try {
        console.log(`  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testCase.name}...`);
        
        global.fetch = jest.fn(() => 
          Promise.resolve({
            ok: true,
            json: () => Promise.resolve(testCase.mockResponse)
          })
        );

        const result = await this.mondayTool._call(testCase.input);
        const parsedResult = JSON.parse(result);
        
        if (!parsedResult.success) {
          throw new Error(`${testCase.name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${parsedResult.error}`);
        }
        
        console.log(`  ‚úÖ ${testCase.name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        this.results.passed++;
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ ${testCase.name}: ${error.message}`);
        this.results.failed++;
        this.results.errors.push(`${testCase.name}: ${error.message}`);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –§–ê–ó–´ 3: Workspaces & Advanced
   */
  async testWorkspacesFunctions() {
    console.log('\nüè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Workspaces & Advanced (–§–∞–∑–∞ 3)...');
    
    const testCases = [
      {
        name: 'createWorkspace',
        input: {
          action: 'createWorkspace',
          workspaceName: 'Test Workspace',
          workspaceKind: 'open'
        },
        mockResponse: {
          data: {
            create_workspace: {
              id: 'workspace_123',
              name: 'Test Workspace',
              kind: 'open'
            }
          }
        }
      },
      {
        name: 'createColumn',
        input: {
          action: 'createColumn',
          boardId: '123',
          columnType: 'text',
          title: 'Test Column'
        },
        mockResponse: {
          data: {
            create_column: {
              id: 'column_123',
              title: 'Test Column',
              type: 'text'
            }
          }
        }
      }
    ];

    for (const testCase of testCases) {
      try {
        console.log(`  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testCase.name}...`);
        
        global.fetch = jest.fn(() => 
          Promise.resolve({
            ok: true,
            json: () => Promise.resolve(testCase.mockResponse)
          })
        );

        const result = await this.mondayTool._call(testCase.input);
        const parsedResult = JSON.parse(result);
        
        if (!parsedResult.success) {
          throw new Error(`${testCase.name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${parsedResult.error}`);
        }
        
        console.log(`  ‚úÖ ${testCase.name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        this.results.passed++;
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ ${testCase.name}: ${error.message}`);
        this.results.failed++;
        this.results.errors.push(`${testCase.name}: ${error.message}`);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  async testPerformanceOptimizations() {
    console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    try {
      // –¢–µ—Å—Ç batch –æ–ø–µ—Ä–∞—Ü–∏–π
      console.log('  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch –æ–ø–µ—Ä–∞—Ü–∏–π...');
      
      const batchRequests = [
        { action: 'getBoards', limit: 5 },
        { action: 'getWorkspaces' },
        { action: 'getUsers', limit: 10 }
      ];
      
      // Mock —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è batch
      global.fetch = jest.fn()
        .mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve({
            data: { boards: [{ id: '1', name: 'Board 1' }] }
          })
        })
        .mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve({
            data: { workspaces: [{ id: '1', name: 'Workspace 1' }] }
          })
        })
        .mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve({
            data: { users: [{ id: '1', name: 'User 1' }] }
          })
        });

      const startTime = Date.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É MondayTool –µ—Å—Ç—å –º–µ—Ç–æ–¥ performBatchOperations
      if (typeof this.mondayTool.performBatchOperations === 'function') {
        const results = await this.mondayTool.performBatchOperations(batchRequests);
        const endTime = Date.now();
        
        console.log(`  ‚úÖ Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ ${endTime - startTime}ms`);
        console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
        this.results.passed++;
      } else {
        console.log('  ‚ö†Ô∏è  –ú–µ—Ç–æ–¥ performBatchOperations –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
      }
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–π: ${error.message}`);
      this.results.failed++;
      this.results.errors.push(`Batch operations: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  async testErrorHandling() {
    console.log('\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
    
    try {
      // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –æ—à–∏–±–æ–∫
      global.fetch = jest.fn(() => 
        Promise.resolve({
          ok: false,
          status: 401,
          statusText: 'Unauthorized',
          json: () => Promise.resolve({
            error_message: 'Invalid API key'
          })
        })
      );

      const result = await this.mondayTool._call({
        action: 'getBoards'
      });
      
      const parsedResult = JSON.parse(result);
      
      if (parsedResult.success) {
        throw new Error('–û—à–∏–±–∫–∞ API –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      }
      
      if (!parsedResult.error.includes('Invalid API key') && 
          !parsedResult.error.includes('401')) {
        throw new Error('–û—à–∏–±–∫–∞ API –Ω–µ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      }
      
      console.log('  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ API –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      this.results.passed++;
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: ${error.message}`);
      this.results.failed++;
      this.results.errors.push(`Error handling: ${error.message}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è monday.com API v2.0 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n');
    console.log('=' * 70);
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å jest mock —Ñ—É–Ω–∫—Ü–∏—é
    if (typeof jest === 'undefined') {
      global.jest = {
        fn: (impl) => {
          const mockFn = impl || (() => {});
          mockFn.mockResolvedValueOnce = (value) => {
            mockFn.mockImplementationOnce(() => Promise.resolve(value));
            return mockFn;
          };
          mockFn.mockImplementationOnce = (impl) => {
            const originalImpl = mockFn.toString();
            Object.defineProperty(mockFn, 'toString', {
              value: () => impl.toString(),
              configurable: true
            });
            const result = impl;
            setTimeout(() => {
              Object.defineProperty(mockFn, 'toString', {
                value: () => originalImpl,
                configurable: true
              });
            }, 0);
            return result;
          };
          return mockFn;
        }
      };
    }

    await this.testSchemaValidation();
    await this.testWebhookFunctions();
    await this.testTeamsFunctions();
    await this.testWorkspacesFunctions();
    await this.testPerformanceOptimizations();
    await this.testErrorHandling();
    
    this.printResults();
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  printResults() {
    console.log('\n' + '=' * 70);
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=' * 70);
    
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.failed}`);
    console.log(`üìà –û–±—â–∏–π —É—Å–ø–µ—Ö: ${Math.round((this.results.passed / (this.results.passed + this.results.failed)) * 100)}%`);
    
    if (this.results.errors.length > 0) {
      console.log('\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:');
      this.results.errors.forEach((error, index) => {
        console.log(`  ${index + 1}. ${error}`);
      });
    }
    
    console.log('\n' + '=' * 70);
    
    if (this.results.failed === 0) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ Monday.com API v2.0 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    } else {
      console.log('‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø');
      console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const tester = new MondayIntegrationTester();
  tester.runAllTests()
    .then(() => {
      process.exit(tester.results.failed > 0 ? 1 : 0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = MondayIntegrationTester;
