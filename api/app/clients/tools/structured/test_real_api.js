#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã getAccount –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º Monday.com API
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: MONDAY_API_KEY=–≤–∞—à_—Ç–æ–∫–µ–Ω node test_real_api.js
 */

const fetch = require('node-fetch');

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π GET_ACCOUNT –∑–∞–ø—Ä–æ—Å –∏–∑ –Ω–∞—à–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const GET_ACCOUNT_QUERY = `
  query getAccount {
    account {
      id
      name
      logo
      show_timeline_weekends
      slug
      tier
      country_code
      first_day_of_the_week
      active_members_count
      plan {
        max_users
        period
        tier
        version
      }
      products {
        id
        kind
      }
      sign_up_product_kind
    }
  }
`;

async function testRealAPI() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Monday.com getAccount —Å —Ä–µ–∞–ª—å–Ω—ã–º API...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
  const apiKey = process.env.MONDAY_API_KEY;
  if (!apiKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONDAY_API_KEY');
    console.log('\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('export MONDAY_API_KEY=–≤–∞—à_—Ç–æ–∫–µ–Ω_monday');
    console.log('node test_real_api.js');
    console.log('\nüìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:');
    console.log('- account:read');
    console.log('\nüîó –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: https://monday.com/developers/apps');
    process.exit(1);
  }

  console.log('1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
  console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω');
  console.log('‚úÖ GraphQL –∑–∞–ø—Ä–æ—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');

  try {
    console.log('\n2. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Monday.com API...');
    console.log('URL:', 'https://api.monday.com/v2');
    
    const startTime = Date.now();
    
    const response = await fetch('https://api.monday.com/v2', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': apiKey,
        'API-Version': '2024-01'
      },
      body: JSON.stringify({
        query: GET_ACCOUNT_QUERY
      })
    });

    const endTime = Date.now();
    console.log(`‚è±Ô∏è  –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${endTime - startTime}ms`);

    console.log('\n3. –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞...');
    console.log('HTTP —Å—Ç–∞—Ç—É—Å:', response.status, response.statusText);

    if (!response.ok) {
      console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      
      if (response.status === 400) {
        console.log('\nüîç –≠—Ç–æ –æ—à–∏–±–∫–∞ 400 Bad Request. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ GraphQL –∑–∞–ø—Ä–æ—Å–∞');
        console.log('2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞');
        console.log('3. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ');
      } else if (response.status === 401) {
        console.log('\nüîç –≠—Ç–æ –æ—à–∏–±–∫–∞ 401 Unauthorized. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω');
        console.log('2. –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
      } else if (response.status === 403) {
        console.log('\nüîç –≠—Ç–æ –æ—à–∏–±–∫–∞ 403 Forbidden. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. –¢–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ account:read');
      }
      
      const errorText = await response.text();
      console.log('\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      return;
    }

    const data = await response.json();
    
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');

    if (data.errors) {
      console.error('\n‚ùå GraphQL –æ—à–∏–±–∫–∏:', JSON.stringify(data.errors, null, 2));
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      data.errors.forEach((error, index) => {
        console.log(`\nüîç –û—à–∏–±–∫–∞ ${index + 1}:`);
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        if (error.extensions) {
          console.log('–ö–æ–¥:', error.extensions.code);
        }
        if (error.path) {
          console.log('–ü—É—Ç—å:', error.path.join('.'));
        }
      });
      return;
    }

    if (!data.data || !data.data.account) {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(data, null, 2));
      return;
    }

    console.log('\nüéâ –£–°–ü–ï–•! getAccount –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:');
    
    const account = data.data.account;
    console.log('- ID –∞–∫–∫–∞—É–Ω—Ç–∞:', account.id);
    console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', account.name);
    console.log('- Slug:', account.slug);
    console.log('- –¢–∞—Ä–∏—Ñ:', account.tier);
    console.log('- –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã:', account.country_code);
    console.log('- –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', account.first_day_of_the_week);
    console.log('- –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', account.active_members_count);
    console.log('- –ü—Ä–æ–¥—É–∫—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', account.sign_up_product_kind);
    
    if (account.plan) {
      console.log('- –ü–ª–∞–Ω —Ç–∞—Ä–∏—Ñ:', account.plan.tier);
      console.log('- –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', account.plan.max_users);
      console.log('- –ü–µ—Ä–∏–æ–¥:', account.plan.period);
    }
    
    if (account.products && account.products.length > 0) {
      console.log('- –ü—Ä–æ–¥—É–∫—Ç—ã:', account.products.map(p => p.kind).join(', '));
    }

    console.log('\n‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('- HTTP —Å—Ç–∞—Ç—É—Å: 200 OK');
    console.log('- GraphQL –æ—à–∏–±–æ–∫: –Ω–µ—Ç');
    console.log('- –í—Å–µ –ø–æ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 400 Bad Request: –£–°–ü–ï–®–ù–û');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    
    if (error.code === 'ENOTFOUND') {
      console.log('üîç –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üîç –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL API');
    }
    
    console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testRealAPI();
}

module.exports = { testRealAPI };
