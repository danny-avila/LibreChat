const fetch = require('node-fetch');

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç createItem —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä—è–º—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –∏ createItem —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
async function finalCreateItemTest() {
  const apiKey = 'eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjk0MjExMjM5LCJhYWkiOjExLCJ1aWQiOjE3NzE5NjYwLCJpYWQiOiIyMDIwLTEyLTIzVDIwOjU4OjQ1LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSIsImFjdGlkIjo3Nzc1MTUwLCJyZ24iOiJ1c2UxIn0.Gg8pbEhIdLEwlVu4azaVQK137bVbUMSww__yqIR1kTM';
  const apiUrl = 'https://api.monday.com/v2';
  const testBoardId = '9261805849';

  console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç createItem - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è\n');

  // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å–∫–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
  console.log('üìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å–∫–µ...');
  
  const boardQuery = `
    query {
      boards(ids: [${testBoardId}]) {
        id
        name
        groups {
          id
          title
        }
        columns {
          id
          title
          type
        }
      }
    }
  `;

  let board = null;
  try {
    const boardResponse = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'API-Version': '2024-10'
      },
      body: JSON.stringify({ query: boardQuery })
    });

    if (boardResponse.ok) {
      const boardData = await boardResponse.json();
      if (boardData.errors) {
        console.log('‚ùå –û—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å–∫–∏:', boardData.errors);
      } else {
        board = boardData.data.boards[0];
        console.log(`‚úÖ –î–æ—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${board.name}`);
        console.log(`üìä –ì—Ä—É–ø–ø: ${board.groups?.length || 0}`);
        console.log(`üìä –ö–æ–ª–æ–Ω–æ–∫: ${board.columns?.length || 0}`);
        
        if (board.groups && board.groups.length > 0) {
          console.log('üìã –ì—Ä—É–ø–ø—ã:');
          board.groups.forEach((group, index) => {
            console.log(`   ${index + 1}. ${group.title} (ID: ${group.id})`);
          });
        }
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏:', boardResponse.status);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
  console.log('\nüìã –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞...');
  
  const simpleCreateMutation = `
    mutation {
      create_item(
        board_id: ${testBoardId},
        item_name: "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ${Date.now()}"
      ) {
        id
        name
        state
        group {
          id
          title
        }
      }
    }
  `;

  try {
    const createResponse = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'API-Version': '2024-10'
      },
      body: JSON.stringify({ query: simpleCreateMutation })
    });

    if (createResponse.ok) {
      const createData = await createResponse.json();
      if (createData.errors) {
        console.log('‚ùå –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è:', createData.errors);
      } else {
        const item = createData.data.create_item;
        console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${item.name} (ID: ${item.id})`);
        console.log(`üìç –ì—Ä—É–ø–ø–∞: ${item.group?.title || 'default'}`);
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', createResponse.status);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }

  // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å column_values
  console.log('\nüìã –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–æ–∫...');

  // –ù–∞–π–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
  const textColumn = board?.columns?.find(c => c.type === 'text');
  const numberColumn = board?.columns?.find(c => c.type === 'numbers');

  if (textColumn || numberColumn) {
    const columnValues = {};
    
    if (textColumn) {
      columnValues[textColumn.id] = "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏";
      console.log(`   –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É: ${textColumn.title}`);
    }
    
    if (numberColumn) {
      columnValues[numberColumn.id] = 99;
      console.log(`   –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É: ${numberColumn.title}`);
    }

    const columnValuesStr = JSON.stringify(JSON.stringify(columnValues));
    
    const advancedCreateMutation = `
      mutation {
        create_item(
          board_id: ${testBoardId},
          item_name: "–¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ ${Date.now()}",
          column_values: ${columnValuesStr}
        ) {
          id
          name
          state
          column_values {
            id
            title
            text
            value
          }
        }
      }
    `;

    try {
      const advancedResponse = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
          'API-Version': '2024-10'
        },
        body: JSON.stringify({ query: advancedCreateMutation })
      });

      if (advancedResponse.ok) {
        const advancedData = await advancedResponse.json();
        if (advancedData.errors) {
          console.log('‚ùå –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', advancedData.errors);
        } else {
          const item = advancedData.data.create_item;
          console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω: ${item.name} (ID: ${item.id})`);
          console.log(`üìä –ö–æ–ª–æ–Ω–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${item.column_values?.length || 0}`);
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', advancedResponse.status);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  } else {
    console.log('‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
  console.log('‚úÖ createItem HTTP 400 Bad Request - –ò–°–ü–†–ê–í–õ–ï–ù–û!');
  console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Monday.com API');
  console.log('‚úÖ column_values –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  console.log('‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ MondayTool, —É–±—Ä–∞–≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è');
}

finalCreateItemTest(); 