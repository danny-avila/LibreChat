#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Puppeteer MCP —Å–µ—Ä–≤–µ—Ä–∞
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ @modelcontextprotocol/server-puppeteer —á–µ—Ä–µ–∑ npx
 * 2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ librechat.yaml
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const yaml = require('js-yaml');

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Puppeteer MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é librechat.yaml
console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ librechat.yaml...');
try {
  const yamlContent = fs.readFileSync('librechat.yaml', 'utf8');
  const config = yaml.load(yamlContent);
  
  if (config.mcpServers && config.mcpServers.puppeteer) {
    console.log('‚úÖ Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('   - Command:', config.mcpServers.puppeteer.command);
    console.log('   - Args:', config.mcpServers.puppeteer.args);
    console.log('   - Timeout:', config.mcpServers.puppeteer.timeout);
    console.log('   - Description:', config.mcpServers.puppeteer.description);
  } else {
    console.log('‚ùå Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    process.exit(1);
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
  process.exit(1);
}

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ npx
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ @modelcontextprotocol/server-puppeteer...');
try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–∫–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ npx
  const result = execSync('npx --yes @modelcontextprotocol/server-puppeteer --version', { 
    encoding: 'utf8',
    timeout: 30000,
    stdio: 'pipe'
  });
  console.log('‚úÖ –ü–∞–∫–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ npx');
} catch (error) {
  console.log('‚ùå –ü–∞–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ npx:', error.message);
  console.log('üîß –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç...');
  
  try {
    execSync('npm install -g @modelcontextprotocol/server-puppeteer', { 
      encoding: 'utf8',
      timeout: 60000 
    });
    console.log('‚úÖ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (installError) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç:', installError.message);
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∑–∞–ø—É—Å—Ç–∏—Ç–µ "npm install -g @modelcontextprotocol/server-puppeteer"');
  }
}

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
const mcpSettingsPath = 'client/src/components/Nav/SettingsTabs/General/MCPSettings.tsx';
if (fs.existsSync(mcpSettingsPath)) {
  console.log('‚úÖ MCPSettings –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω');
} else {
  console.log('‚ùå MCPSettings –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

const generalPath = 'client/src/components/Nav/SettingsTabs/General/General.tsx';
if (fs.existsSync(generalPath)) {
  const generalContent = fs.readFileSync(generalPath, 'utf8');
  if (generalContent.includes('MCPSettings')) {
    console.log('‚úÖ MCPSettings –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ General –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  } else {
    console.log('‚ùå MCPSettings –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ General –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  }
}

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...');
const localizationPath = 'client/src/locales/en/translation.json';
if (fs.existsSync(localizationPath)) {
  const localization = JSON.parse(fs.readFileSync(localizationPath, 'utf8'));
  if (localization['com_ui_mcp_settings'] && localization['com_ui_mcp_settings_description']) {
    console.log('‚úÖ –ö–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
  } else {
    console.log('‚ùå –ö–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  }
}

console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run backend:dev');
console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: npm run frontend:dev');  
console.log('   3. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ MCP Settings –≤ General');
console.log('   5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: "–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç google.com"'); 