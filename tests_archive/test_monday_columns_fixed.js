/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ Monday.com API
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: MONDAY_API_KEY=–≤–∞—à_—Ç–æ–∫–µ–Ω node test_monday_columns_fixed.js
 */

const { MondayTool } = require('./api/app/clients/tools/structured/MondayTool');

async function testColumnUpdates() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ Monday.com...\n');

  // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const apiKey = process.env.MONDAY_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MONDAY_API_KEY');
    console.log('–ü—Ä–∏–º–µ—Ä: MONDAY_API_KEY=your_token node test_monday_columns_fixed.js');
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MondayTool
  const mondayTool = new MondayTool({
    MONDAY_API_KEY: apiKey
  });

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–æ—Å–∫—É
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ—Å–∫–∏...');
    const boardsResult = await mondayTool._call({
      action: 'getBoards',
      limit: 1
    });
    
    const boards = JSON.parse(boardsResult).data;
    if (boards.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testBoard = boards[0];
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É: "${testBoard.name}" (ID: ${testBoard.id})`);

    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    console.log('\nüìã –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö...');
    let columnsResult = await mondayTool._call({
      action: 'getColumnsInfo',
      boardId: testBoard.id
    });
    
    let columnsData = JSON.parse(columnsResult);
    let columns = columnsData.data || []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º let –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const initialColumnsForMultipleUpdate = [...columns]; // –ö–æ–ø–∏—è –¥–ª—è —à–∞–≥–∞ 5
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${columns.length}`);

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    console.log('\nüìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞...');
    const createResult = await mondayTool._call({
      action: 'createItem',
      boardId: testBoard.id,
      itemName: 'Test Item for Column Updates'
    });
    
    const createdItem = JSON.parse(createResult).data;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: "${createdItem.name}" (ID: ${createdItem.id})`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
    const mondayDomain = process.env.MONDAY_DOMAIN || 'retailbox-company'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –¥–æ–º–µ–Ω
    const itemLink = `https://${mondayDomain}.monday.com/boards/${testBoard.id}/pulses/${createdItem.id}`;
    console.log(`üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${itemLink}`);

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
    console.log('\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...');

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
    const testCases = [
      {
        type: 'text',
        value: 'Updated text value',
        description: '–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞'
      },
      {
        type: 'numbers',
        value: '42',
        description: '–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞'
      },
      {
        type: 'status',
        value: { index: 1 },
        description: '–°—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–∫–∞'
      },
      {
        type: 'date',
        value: { date: '2024-03-20' },
        description: '–î–∞—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞'
      },
      {
        type: 'checkbox',
        value: { checked: true },
        description: '–ß–µ–∫–±–æ–∫—Å –∫–æ–ª–æ–Ω–∫–∞'
      }
    ];

    for (const testCase of testCases) {
      let column = columns.find(col => col.type === testCase.type);
      
      if (!column) {
        console.log(`\n‚ö†Ô∏è ${testCase.description} (${testCase.type}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...`);
        try {
          const createColumnResult = await mondayTool._call({
            action: 'createColumn',
            boardId: testBoard.id,
            title: `Test ${testCase.description}`,
            columnType: testCase.type
          });
          const createdColumnData = JSON.parse(createColumnResult);
          if (createdColumnData.success && createdColumnData.data) {
            column = createdColumnData.data;
            console.log(`‚úÖ –ù–æ–≤–∞—è ${testCase.description} (ID: ${column.id}) —Å–æ–∑–¥–∞–Ω–∞.`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
            columnsResult = await mondayTool._call({ action: 'getColumnsInfo', boardId: testBoard.id });
            columnsData = JSON.parse(columnsResult);
            columns = columnsData.data || [];
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã API —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            await new Promise(resolve => setTimeout(resolve, 2000)); 
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${testCase.description}: ${createdColumnData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç–µ—Å—Ç, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
          }
        } catch (error) {
          console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${testCase.description}: ${error.message}`);
          continue;
        }
      }

      if (column) { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Ç–æ—á–Ω–æ –µ—Å—Ç—å
        console.log(`\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testCase.description} (${column.title} - ${column.type})...`);
        
        try {
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º changeColumnValue
          console.log('  –¢–µ—Å—Ç changeColumnValue:');
          const result1 = await mondayTool._call({
            action: 'changeColumnValue',
            boardId: testBoard.id,
            itemId: createdItem.id,
            columnId: column.id,
            value: testCase.value
          });
          console.log('  ‚úÖ changeColumnValue —É—Å–ø–µ—à–Ω–æ');

          // –¢–µ—Å—Ç–∏—Ä—É–µ–º changeSimpleColumnValue –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤
          if (['text', 'numbers'].includes(testCase.type)) {
            console.log('  –¢–µ—Å—Ç changeSimpleColumnValue:');
            const result2 = await mondayTool._call({
              action: 'changeSimpleColumnValue',
              boardId: testBoard.id,
              itemId: createdItem.id,
              columnId: column.id,
              value: testCase.value
            });
            console.log('  ‚úÖ changeSimpleColumnValue —É—Å–ø–µ—à–Ω–æ');
          }

        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    console.log('\nüìã –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...');
    
    const multipleUpdates = {};
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º initialColumnsForMultipleUpdate –¥–ª—è —à–∞–≥–∞ 5
    const columnsToUpdate = initialColumnsForMultipleUpdate.slice(0, 3);

    if (columnsToUpdate.length === 0 && columns.length > 0) {
      // –ï—Å–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –±—ã–ª–æ –∫–æ–ª–æ–Ω–æ–∫, –Ω–æ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ —à–∞–≥–µ 4,
      // –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
      console.log('‚ö†Ô∏è –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —à–∞–≥–µ 4, —Ç–∞–∫ –∫–∞–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏—Ö –Ω–µ –±—ã–ª–æ.');
      columns.slice(0,3).forEach(c => {
         if (c && c.id) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å ID
            switch(c.type) {
                case 'text':
                    multipleUpdates[c.id] = 'Multiple update text';
                    break;
                case 'numbers':
                    multipleUpdates[c.id] = '42';
                    break;
                case 'status':
                    multipleUpdates[c.id] = { index: 1 }; // –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                    break;
                // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                default:
                    // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
                    multipleUpdates[c.id] = 'Default value for ' + c.type;
            }
        }
      });
    } else {
      columnsToUpdate.forEach(c => {
        if (c && c.id) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å ID
            switch(c.type) {
                case 'text':
                    multipleUpdates[c.id] = 'Multiple update text';
                    break;
                case 'numbers':
                    multipleUpdates[c.id] = '42';
                    break;
                case 'status':
                    // –î–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –º–µ—Ç–∫–∏
                    // –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ { index: 1 } –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å–æ–∫.
                    // –õ—É—á—à–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö.
                    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ—à–∏–±–∫–∏.
                    multipleUpdates[c.id] = { index: 1 }; 
                    break;
                // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                default:
                    // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
                    multipleUpdates[c.id] = 'Default value for ' + c.type;
            }
        }
      });
    }

    if (Object.keys(multipleUpdates).length > 0) {
      try {
        const result = await mondayTool._call({
          action: 'changeMultipleColumnValues',
          boardId: testBoard.id,
          itemId: createdItem.id,
          columnValues: multipleUpdates // –≠—Ç–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º { columnId: value, ... }
        });
        console.log('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
// testColumnUpdates().catch(console.error);

async function createAndFillItemOnSpecificBoard(targetBoardId, newItemName = 'New Fully Populated Item') {
  console.log(`üöÄ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –¥–æ—Å–∫–µ ID: ${targetBoardId}...\n`);

  const apiKey = process.env.MONDAY_API_KEY;
  if (!apiKey) {
    console.error('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MONDAY_API_KEY');
    return;
  }

  const mondayTool = new MondayTool({ MONDAY_API_KEY: apiKey });
  const mondayDomain = process.env.MONDAY_DOMAIN || 'retailbox-company';

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ—Å–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
    console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ—Å–∫–∏...');
    let boardDetailsResult;
    try {
      boardDetailsResult = await mondayTool._call({
        action: 'getBoard',
        boardId: targetBoardId,
      });
    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –¥–æ—Å–∫–µ ${targetBoardId}: ${e.message}`);
        return;
    }
    const boardDetails = JSON.parse(boardDetailsResult);
    if (!boardDetails.success || !boardDetails.data) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å–∫–µ ${targetBoardId}. –û—Ç–≤–µ—Ç API: ${boardDetailsResult}`);
        return;
    }
    console.log(`‚úÖ –î–æ—Å–∫–∞ "${boardDetails.data.name}" (ID: ${targetBoardId}) –¥–æ—Å—Ç—É–ø–Ω–∞.`);


    // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    console.log('\nüìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞...');
    const createResult = await mondayTool._call({
      action: 'createItem',
      boardId: targetBoardId,
      itemName: newItemName,
    });
    const createdItemResponse = JSON.parse(createResult);
    if (!createdItemResponse.success || !createdItemResponse.data || !createdItemResponse.data.id) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –¥–æ—Å–∫–µ ${targetBoardId}. –û—Ç–≤–µ—Ç API: ${createResult}`);
      return;
    }
    const createdItem = createdItemResponse.data;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: "${createdItem.name}" (ID: ${createdItem.id})`);
    const itemLink = `https://${mondayDomain}.monday.com/boards/${targetBoardId}/pulses/${createdItem.id}`;
    console.log(`üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${itemLink}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö –Ω–∞ –¥–æ—Å–∫–µ
    console.log('\nüìã –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö –¥–æ—Å–∫–∏...');
    const columnsResult = await mondayTool._call({
      action: 'getColumnsInfo',
      boardId: targetBoardId,
    });
    const columnsData = JSON.parse(columnsResult);
    if (!columnsData.success || !columnsData.data) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–æ—Å–∫–∏ ${targetBoardId}. –û—Ç–≤–µ—Ç API: ${columnsResult}`);
      return;
    }
    const columns = columnsData.data;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –¥–æ—Å–∫–µ: ${columns.length}`);
    if (columns.length === 0) {
      console.log('‚ö†Ô∏è –ù–∞ –¥–æ—Å–∫–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.');
      console.log('\nüéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è).');
      return;
    }

    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    console.log('\nüìã –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫...');
    const columnValuesToSet = {};
    const currentDate = new Date();
    const dateForMonday = { date: currentDate.toISOString().split('T')[0] }; // YYYY-MM-DD
    const timeForMonday = { time: currentDate.toTimeString().split(' ')[0].substring(0, 5) }; // HH:MM

    // --- –ù–ê–ß–ê–õ–û: –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò ---
    let foundTextColumnForDebug = false;
    let debugColumnId = null;
    let debugTextValue = null;

    for (const column of columns) {
      // –ò—â–µ–º —Ç—É —Å–∞–º—É—é –∫–æ–ª–æ–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–∞ –≤ MondayTool.js
      if (column.id === 'text_mkpdggrx') { 
        debugColumnId = column.id;
        debugTextValue = `This value will be ignored by MondayTool.js ${new Date().toLocaleTimeString()}`;
        console.log(`  [–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: "${column.title}" (ID: ${debugColumnId}).`);
        foundTextColumnForDebug = true;
        break; 
      }
    }

    if (foundTextColumnForDebug) {
      console.log(`\n  [–û–¢–õ–ê–î–ö–ê] –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É ID ${debugColumnId} —á–µ—Ä–µ–∑ changeMultipleColumnValues (—Å —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–º JSON –≤ MondayTool.js)...`);
      const multiUpdateResult = await mondayTool._call({
        action: 'changeMultipleColumnValues', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        boardId: targetBoardId,
        itemId: createdItem.id,
        columnValues: { [debugColumnId]: debugTextValue } // –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ MondayTool.js
      });
      const multiUpdateResponse = JSON.parse(multiUpdateResult);
      if (multiUpdateResponse.success) {
        console.log('  [–û–¢–õ–ê–î–ö–ê] ‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ changeMultipleColumnValues (—Å —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–º JSON) —É—Å–ø–µ—à–Ω–æ.');
      } else {
        console.error(`  [–û–¢–õ–ê–î–ö–ê] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ changeMultipleColumnValues (—Å —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–º JSON). –û—Ç–≤–µ—Ç API: ${multiUpdateResult}`);
      }
    } else {
      console.log('  [–û–¢–õ–ê–î–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ text_mkpdggrx –¥–ª—è —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.');
    }
    // --- –ö–û–ù–ï–¶: –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò ---

    /* // --- –ù–ê–ß–ê–õ–û: –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ô –ö–û–î –û–î–ò–ù–û–ß–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---
    if (foundTextColumnForDebug) {
      console.log(`\n  [–û–¢–õ–ê–î–ö–ê] –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É ID ${debugColumnId} —á–µ—Ä–µ–∑ changeColumnValue...`);
      const singleUpdateResult = await mondayTool._call({
        action: 'changeColumnValue', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        boardId: targetBoardId,
        itemId: createdItem.id,
        columnId: debugColumnId,
        value: debugTextValue 
      });
      const singleUpdateResponse = JSON.parse(singleUpdateResult);
      if (singleUpdateResponse.success) {
        console.log('  [–û–¢–õ–ê–î–ö–ê] ‚úÖ –û–¥–∏–Ω–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ changeColumnValue —É—Å–ø–µ—à–Ω–æ.');
      } else {
        console.error(`  [–û–¢–õ–ê–î–ö–ê] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ changeColumnValue. –û—Ç–≤–µ—Ç API: ${singleUpdateResult}`);
      }
    } else {
      console.log('  [–û–¢–õ–ê–î–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    }
    */ // --- –ö–û–ù–ï–¶: –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ô –ö–û–î –û–î–ò–ù–û–ß–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---

    /* // --- –ù–ê–ß–ê–õ–û: –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ô –ö–û–î –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –í–°–ï–• –ö–û–õ–û–ù–û–ö ---
    for (const column of columns) {
      if (column.id && column.type) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —Ç—Ä–µ–±—É—é—Ç —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
        if (['formula', 'auto_number', 'lookup', 'subtasks', 'board-relation', 'integration', 'last_updated', 'creation_log'].includes(column.type)) {
          console.log(`  ‚ö™Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "${column.title}" (ID: ${column.id}, –¢–∏–ø: ${column.type}) –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ).`);
          continue;
        }
        
        let valueToSet;
        switch (column.type) {
          case 'text':
          case 'long-text':
            valueToSet = `–¢–µ—Å—Ç –¥–ª—è "${column.title}" - ${new Date().toLocaleTimeString()}`;
            break;
          case 'numbers':
            valueToSet = Math.floor(Math.random() * 1000) + 1;
            break;
          case 'status':
            try {
                const settings = column.settings_str ? JSON.parse(column.settings_str) : null;
                if (settings && settings.labels && Object.keys(settings.labels).length > 0) {
                    const firstLabelIndexKey = Object.keys(settings.labels)[0]; 
                    const firstLabelText = settings.labels[firstLabelIndexKey];     

                    if (column.id === 'status') { 
                        valueToSet = { label: firstLabelText };
                        console.log(`  üîµ –î–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "${column.title}" (ID: ${column.id}) –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–µ—Ç–∫–∞: "${firstLabelText}"`);
                    } else {
                        valueToSet = { index: parseInt(firstLabelIndexKey, 10) };
                        console.log(`  üîµ –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "${column.title}" (ID: ${column.id}) –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–Ω–¥–µ–∫—Å: ${firstLabelIndexKey}`);
                    }
                } else if (settings && settings.labels_colors && settings.labels_colors.length > 0) {
                    const labelConfig = settings.labels_colors[0];
                    valueToSet = { index: labelConfig.id }; 
                    console.log(`  üîµ –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${column.title}" (ID: ${column.id}) –ø–æ labels_colors –≤—ã–±—Ä–∞–Ω –∏–Ω–¥–µ–∫—Å: ${labelConfig.id}`);
                } else {
                    valueToSet = { index: 0 }; 
                    console.warn(`  üü° –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è "${column.title}" (ID: ${column.id}). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è { index: 0 }.`);
                }
            } catch (e) {
                console.warn(`  üü° –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è "${column.title}" (ID: ${column.id}). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è { index: 0 }. –û—à–∏–±–∫–∞: ${e.message}`);
                valueToSet = { index: 0 };
            }
            break;
          case 'date':
            valueToSet = dateForMonday;
            break;
          case 'timeline':
            const tomorrow = new Date(currentDate);
            tomorrow.setDate(currentDate.getDate() + 1);
            valueToSet = { 
              from: currentDate.toISOString().split('T')[0], 
              to: tomorrow.toISOString().split('T')[0] 
            };
            break;
          case 'checkbox':
            valueToSet = { checked: true };
            break;
          case 'multiple-person': 
          case 'person':
             console.log(`  ‚ö™Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "${column.title}" (ID: ${column.id}, –¢–∏–ø: ${column.type}) –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ç—Ä–µ–±—É—é—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).`);
            continue; 
          case 'world_clock': 
             console.log(`  ‚ö™Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "${column.title}" (ID: ${column.id}, –¢–∏–ø: ${column.type}) –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
            continue; 
          case 'link':
            valueToSet = { url: 'https://monday.com', text: 'Monday.com Link' };
            break;
          case 'dropdown':
             try {
                const settings = column.settings_str ? JSON.parse(column.settings_str) : null;
                if (settings && settings.labels && settings.labels.length > 0) {
                    valueToSet = { ids: [settings.labels[0].id] , changed_at: new Date().toISOString() }; 
                     console.log(`  üîµ –î–ª—è dropdown "${column.title}" –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è ID: ${settings.labels[0].id}`);
                } else {
                    console.warn(`  üü° –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è dropdown "${column.title}". –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.`);
                    continue;
                }
            } catch (e) {
                console.warn(`  üü° –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ dropdown –¥–ª—è "${column.title}": ${e.message}. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.`);
                continue;
            }
            break;
          case 'email':
            valueToSet = { email: 'test@example.com', text: 'Test Email' };
            break;
          case 'phone':
            valueToSet = { phone: '+1234567890', countryShortName: 'US' };
            break;
          case 'rating':
             valueToSet = { rating: Math.floor(Math.random() * 5) + 1 }; 
            break;
          case 'hour': 
            valueToSet = timeForMonday;
            break;
          case 'item_id': 
             console.log(`  ‚ö™Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "${column.title}" (ID: ${column.id}, –¢–∏–ø: ${column.type}) –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞ (ID —ç–ª–µ–º–µ–Ω—Ç–∞).`);
            continue;
          case 'week':
            valueToSet = { week: { year: currentDate.getFullYear(), week: Math.floor(currentDate.getDate() / 7) } };
            break;
          default:
            console.log(`  üü° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ "${column.title}" (ID: ${column.id}, –¢–∏–ø: ${column.type}). –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.`);
            valueToSet = `–ê–≤—Ç–æ-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ ${column.type}`;
            break;
        }
        if (valueToSet !== undefined) {
            console.log(`  ‚û°Ô∏è –î–ª—è –∫–æ–ª–æ–Ω–∫–∏ "${column.title}" (ID: ${column.id}, –¢–∏–ø: ${column.type}) –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:`, JSON.stringify(valueToSet));
            columnValuesToSet[column.id] = valueToSet;
        }
      }
    }
    */ // --- –ö–û–ù–ï–¶: –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ô –ö–û–î –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –í–°–ï–• –ö–û–õ–û–ù–û–ö ---

    // 5. –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    if (Object.keys(columnValuesToSet).length > 0) {
      console.log('\nüìã –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—Å–µ–º–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏...');
      const updateResult = await mondayTool._call({
        action: 'changeMultipleColumnValues',
        boardId: targetBoardId,
        itemId: createdItem.id,
        columnValues: columnValuesToSet,
      });
      const updateResponse = JSON.parse(updateResult);
      if (updateResponse.success) {
        console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.');
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫. –û—Ç–≤–µ—Ç API: ${updateResult}`);
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π (–∫—Ä–æ–º–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö).');
    }

    console.log('\nüéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ: ${itemLink}`);

  } catch (error) {
    console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error.message, error.stack);
  }
}

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ù–£–ñ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø:
// testColumnUpdates().catch(console.error); // –°—Ç–∞—Ä—ã–π –≤—ã–∑–æ–≤ –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù

const specificBoardIdToFill = '930298588'; 
createAndFillItemOnSpecificBoard(specificBoardIdToFill, `Test Item Full Fill ${new Date().toISOString()}`); 