/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ updateColumn
 */

const { MondayTool } = require('./api/app/clients/tools/structured/MondayTool');

async function testValidation() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ updateColumn...\n');

  const mondayTool = new MondayTool({
    MONDAY_API_KEY: 'test_key_for_validation'
  });

  // –¢–µ—Å—Ç 1: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...');
  
  const testCases = [
    {
      name: '–ë–µ–∑ boardId',
      params: { itemId: '123', columnId: 'col1', value: 'test' },
      expectedError: 'boardId, itemId, columnId and value are required'
    },
    {
      name: '–ë–µ–∑ itemId',
      params: { boardId: '123', columnId: 'col1', value: 'test' },
      expectedError: 'boardId, itemId, columnId and value are required'
    },
    {
      name: '–ë–µ–∑ columnId',
      params: { boardId: '123', itemId: '456', value: 'test' },
      expectedError: 'boardId, itemId, columnId and value are required'
    },
    {
      name: '–ë–µ–∑ value',
      params: { boardId: '123', itemId: '456', columnId: 'col1' },
      expectedError: 'boardId, itemId, columnId and value are required'
    },
    {
      name: '–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å',
      params: { boardId: '123', itemId: '456', columnId: 'col1', value: 'test' },
      expectedError: null
    }
  ];

  for (const testCase of testCases) {
    try {
      await mondayTool._call({
        action: 'updateColumn',
        ...testCase.params
      });
      
      if (testCase.expectedError) {
        console.log(`‚ùå ${testCase.name}: –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –µ–µ –Ω–µ –±—ã–ª–æ`);
      } else {
        console.log(`‚ö†Ô∏è ${testCase.name}: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –æ–∂–∏–¥–∞–µ–º–∞)`);
      }
    } catch (error) {
      if (testCase.expectedError && error.message.includes(testCase.expectedError)) {
        console.log(`‚úÖ ${testCase.name}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏`);
      } else if (!testCase.expectedError && error.message.includes('Monday.com API key is required')) {
        console.log(`‚ö†Ô∏è ${testCase.name}: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –æ—à–∏–±–∫–∞ API –∫–ª—é—á–∞ –æ–∂–∏–¥–∞–µ–º–∞`);
      } else {
        console.log(`‚ùå ${testCase.name}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    }
  }

  console.log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π...');
  
  const valueTestCases = [
    {
      name: '–°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
      value: 'Simple text',
      expected: '–¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–π'
    },
    {
      name: '–û–±—ä–µ–∫—Ç –∑–Ω–∞—á–µ–Ω–∏–µ',
      value: { label: 'Working on it' },
      expected: '–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON'
    },
    {
      name: '–ß–∏—Å–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ',
      value: 42,
      expected: '–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON'
    },
    {
      name: '–ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ',
      value: true,
      expected: '–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON'
    }
  ];

  for (const testCase of valueTestCases) {
    console.log(`üìù ${testCase.name}: ${testCase.expected}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const formattedValue = typeof testCase.value === 'string' ? testCase.value : JSON.stringify(testCase.value);
    console.log(`   –ò—Å—Ö–æ–¥–Ω–æ–µ: ${JSON.stringify(testCase.value)}`);
    console.log(`   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: ${formattedValue}`);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

testValidation().catch(console.error);
