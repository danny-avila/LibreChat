/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç Monday.com API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: MONDAY_API_KEY=–≤–∞—à_—Ç–æ–∫–µ–Ω node test_monday_simple.js
 */

const fetch = require('node-fetch');

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiKey = process.env.MONDAY_API_KEY;

if (!apiKey) {
  console.error('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MONDAY_API_KEY');
  console.log('–ü—Ä–∏–º–µ—Ä: MONDAY_API_KEY=your_token node test_monday_simple.js');
  process.exit(1);
}

const API_URL = 'https://api.monday.com/v2';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
async function executeQuery(query, variables = {}) {
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': apiKey,
        'API-Version': '2023-10'
      },
      body: JSON.stringify({
        query: query,
        variables: variables
      })
    });

    const data = await response.json();
    
    if (data.errors) {
      throw new Error(`GraphQL Error: ${JSON.stringify(data.errors)}`);
    }
    
    return data;
  } catch (error) {
    console.error('Request failed:', error.message);
    throw error;
  }
}

async function testMondayColumnUpdate() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Monday.com Column Update API...\n');

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫...');
    const boardsQuery = `
      query {
        boards(limit: 5) {
          id
          name
        }
      }
    `;
    
    const boardsResult = await executeQuery(boardsQuery);
    const boards = boardsResult.data.boards;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫: ${boards.length}`);
    
    if (boards.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testBoard = boards[0];
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É: "${testBoard.name}" (ID: ${testBoard.id})`);

    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ—Å–∫–∏
    console.log('\nüìã –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ—Å–∫–∏...');
    const itemsQuery = `
      query($boardId: ID!) {
        boards(ids: [$boardId]) {
          items(limit: 3) {
            id
            name
            column_values {
              id
              type
              text
              value
            }
          }
        }
      }
    `;
    
    const itemsResult = await executeQuery(itemsQuery, { boardId: testBoard.id });
    const items = itemsResult.data.boards[0].items;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);
    
    if (items.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–æ—Å–∫–µ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç...');
      
      const createItemMutation = `
        mutation($boardId: ID!, $itemName: String!) {
          create_item(board_id: $boardId, item_name: $itemName) {
            id
            name
          }
        }
      `;
      
      const createResult = await executeQuery(createItemMutation, {
        boardId: testBoard.id,
        itemName: 'Test Item for Column Update'
      });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: ${createResult.data.create_item.name} (ID: ${createResult.data.create_item.id})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const updatedItemsResult = await executeQuery(itemsQuery, { boardId: testBoard.id });
      items.push(...updatedItemsResult.data.boards[0].items);
    }

    const testItem = items[0];
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç: "${testItem.name}" (ID: ${testItem.id})`);

    // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    console.log('\nüìã –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–Ω–∫–∞—Ö...');
    const columnsQuery = `
      query($boardId: ID!) {
        boards(ids: [$boardId]) {
          columns {
            id
            title
            type
            settings_str
          }
        }
      }
    `;
    
    const columnsResult = await executeQuery(columnsQuery, { boardId: testBoard.id });
    const columns = columnsResult.data.boards[0].columns;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${columns.length}`);
    
    // –ù–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const textColumn = columns.find(col => col.type === 'text');
    const statusColumn = columns.find(col => col.type === 'status');
    const numbersColumn = columns.find(col => col.type === 'numbers');
    const dateColumn = columns.find(col => col.type === 'date');

    console.log('\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    columns.forEach(col => {
      console.log(`   - ${col.title} (${col.type}, ID: ${col.id})`);
    });

    // –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
    console.log('\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...');

    const testCases = [
      {
        column: textColumn,
        value: '–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç ' + new Date().toLocaleTimeString(),
        mutationType: 'change_simple_column_value',
        description: '–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–ø—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)'
      },
      {
        column: statusColumn,
        value: { index: 1 },
        mutationType: 'change_column_value',
        description: '–°—Ç–∞—Ç—É—Å –∫–æ–ª–æ–Ω–∫–∞ (JSON —Å index)'
      },
      {
        column: numbersColumn,
        value: '42',
        mutationType: 'change_simple_column_value',
        description: '–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–ø—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)'
      },
      {
        column: dateColumn,
        value: { date: new Date().toISOString().split('T')[0] },
        mutationType: 'change_column_value',
        description: '–î–∞—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞ (JSON —Å date)'
      }
    ];

    for (const testCase of testCases) {
      if (!testCase.column) {
        console.log(`‚ö†Ô∏è ${testCase.description} - –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ`);
        continue;
      }

      console.log(`\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testCase.description}...`);
      console.log(`   –ö–æ–ª–æ–Ω–∫–∞: "${testCase.column.title}" (ID: ${testCase.column.id})`);
      console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ:`, testCase.value);

      try {
        let mutation;
        let variables;

        if (testCase.mutationType === 'change_simple_column_value') {
          mutation = `
            mutation($boardId: ID!, $itemId: ID!, $columnId: String!, $value: String!) {
              change_simple_column_value(
                board_id: $boardId, 
                item_id: $itemId, 
                column_id: $columnId, 
                value: $value,
                create_labels_if_missing: true
              ) {
                id
                name
              }
            }
          `;
          variables = {
            boardId: testBoard.id,
            itemId: testItem.id,
            columnId: testCase.column.id,
            value: String(testCase.value)
          };
        } else {
          mutation = `
            mutation($boardId: ID!, $itemId: ID!, $columnId: String!, $value: JSON!) {
              change_column_value(
                board_id: $boardId, 
                item_id: $itemId, 
                column_id: $columnId, 
                value: $value,
                create_labels_if_missing: true
              ) {
                id
                name
              }
            }
          `;
          variables = {
            boardId: testBoard.id,
            itemId: testItem.id,
            columnId: testCase.column.id,
            value: JSON.stringify(testCase.value)
          };
        }

        const updateResult = await executeQuery(mutation, variables);
        console.log(`‚úÖ ${testCase.description} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        
        // –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.log(`‚ùå ${testCase.description} - –æ—à–∏–±–∫–∞:`, error.message);
      }
    }

    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    
    const verifyQuery = `
      query($boardId: ID!, $itemId: ID!) {
        boards(ids: [$boardId]) {
          items(ids: [$itemId]) {
            id
            name
            column_values {
              id
              type
              text
              value
              column {
                title
              }
            }
          }
        }
      }
    `;
    
    const verifyResult = await executeQuery(verifyQuery, { 
      boardId: testBoard.id, 
      itemId: testItem.id 
    });
    
    const updatedItem = verifyResult.data.boards[0].items[0];
    
    if (updatedItem) {
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç "${updatedItem.name}":`);
      updatedItem.column_values.forEach(col => {
        if (col.text || col.value) {
          console.log(`   - ${col.column.title} (${col.type}): ${col.text || JSON.stringify(col.value)}`);
        }
      });
    }

    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    
    if (error.message.includes('GraphQL')) {
      console.error('üìã –≠—Ç–æ GraphQL –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.error('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
      console.error('   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Monday.com');
      console.error('   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMondayColumnUpdate().catch(console.error);
